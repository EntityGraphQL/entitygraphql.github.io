"use strict";(self.webpackChunkentity_graphql_docs=self.webpackChunkentity_graphql_docs||[]).push([[39],{3905:(e,t,i)=>{i.d(t,{Zo:()=>u,kt:()=>m});var n=i(7294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function a(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function l(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),i=t;return e&&(i="function"==typeof e?e(t):a(a({},t),e)),i},u=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(i),h=r,m=c["".concat(p,".").concat(h)]||c[h]||d[h]||o;return i?n.createElement(m,a(a({ref:t},u),{},{components:i})):n.createElement(m,a({ref:t},u))}));function m(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=i.length,a=new Array(o);a[0]=h;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:r,a[1]=l;for(var s=2;s<o;s++)a[s]=i[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,i)}h.displayName="MDXCreateElement"},7480:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=i(7462),r=(i(7294),i(3905));const o={sidebar_position:5},a="Authorization",l={unversionedId:"authorization",id:"authorization",title:"Authorization",description:"You should secure the route where you app/client posts request to in any ASP.NET supports. Given GraphQL works with a schema you likely want to provide authorization within the schema. EntityGraphQL provides support for checking claims on a ClaimsPrincipal object.",source:"@site/docs/authorization.md",sourceDirName:".",slug:"/authorization",permalink:"/docs/authorization",draft:!1,editUrl:"https://github.com/EntityGraphQL/EntityGraphQL/tree/master/docs/docs/authorization.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Using NewtonSoft JSON",permalink:"/docs/serialization-naming/newtonsoft-json"},next:{title:"Validation",permalink:"/docs/validation"}},p={},s=[{value:"Passing in the User",id:"passing-in-the-user",level:2},{value:"Adding Authorization on Roles or Policies",id:"adding-authorization-on-roles-or-policies",level:2},{value:"Mutations",id:"mutations",level:2},{value:"Queries",id:"queries",level:2},{value:"Authorization without ASP.Net",id:"authorization-without-aspnet",level:2}],u={toc:s},c="wrapper";function d(e){let{components:t,...i}=e;return(0,r.kt)(c,(0,n.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"authorization"},"Authorization"),(0,r.kt)("p",null,"You should secure the route where you app/client posts request to in any ASP.NET supports. Given GraphQL works with a schema you likely want to provide authorization within the schema. EntityGraphQL provides support for checking claims on a ",(0,r.kt)("inlineCode",{parentName:"p"},"ClaimsPrincipal")," object."),(0,r.kt)("h2",{id:"passing-in-the-user"},"Passing in the User"),(0,r.kt)("p",null,"First pass in the ",(0,r.kt)("inlineCode",{parentName:"p"},"ClaimsPrincipal")," to the query call"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note if you are using the ",(0,r.kt)("inlineCode",{parentName:"em"},"AddGraphQLSchema()")," extension in ",(0,r.kt)("inlineCode",{parentName:"em"},"EntityGraphQL.AspNet")," this is already handled for you.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"// Assuming you're in a ASP.NET controller\n// this.User is the current ClaimsPrincipal\nvar results = await schemaProvider.ExecuteRequestAsync(query, dbContext, this.HttpContext.RequestServices, this.User);\n")),(0,r.kt)("h2",{id:"adding-authorization-on-roles-or-policies"},"Adding Authorization on Roles or Policies"),(0,r.kt)("p",null,"You can add authorization requirements throughout your schema even using the ",(0,r.kt)("inlineCode",{parentName:"p"},"AuthorizeAttribute")," or when building/modifying your schema."),(0,r.kt)("p",null,"_","Note: if you provide multiple ",(0,r.kt)("inlineCode",{parentName:"p"},"[AuthorizeAttribute]")," attributes on a single field/mutation they are treated as ",(0,r.kt)("inlineCode",{parentName:"p"},"AND")," meaning all are required. If you provide a single ",(0,r.kt)("inlineCode",{parentName:"p"},"[AuthorizeAttribute]")," attribute with multiple roles/policies in a comma-separated string they are treated as ",(0,r.kt)("inlineCode",{parentName:"p"},"OR")," i.e. having any of those listed will authorize access."),(0,r.kt)("h2",{id:"mutations"},"Mutations"),(0,r.kt)("p",null,"Mark you mutation methods with the ",(0,r.kt)("inlineCode",{parentName:"p"},'[Authorize(Roles = "role-name")]')," attribute."),(0,r.kt)("p",null,"Policy authorization with ",(0,r.kt)("inlineCode",{parentName:"p"},'[Authorize(Policy = "policy-name")]')," is also supported when using ",(0,r.kt)("inlineCode",{parentName:"p"},"EntityGraphQL.AspNet"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'public class MovieMutations\n{\n  [GraphQLMutation]\n  [Authorize(Roles = "movie-editor")]\n  public Movie AddActor(MyDbContext db, ActorArgs args)\n  {\n    // ...\n  }\n}\n')),(0,r.kt)("p",null,"If a ",(0,r.kt)("inlineCode",{parentName:"p"},"ClaimsPrincipal")," is provided with the query call it will be required to be Authorized and have a Role of ",(0,r.kt)("inlineCode",{parentName:"p"},"movie-editor")," to call this mutation."),(0,r.kt)("h2",{id:"queries"},"Queries"),(0,r.kt)("p",null,"If you are using the ",(0,r.kt)("inlineCode",{parentName:"p"},"SchemaBuilder.FromObject<TContext>()")," you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},'[Authorize(Roles = "role-name")]')," attribute again throughout the objects."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'public class MyDbContext : DbContext {\n  protected override void OnModelCreating(ModelBuilder builder) {\n    // Set up your relations\n  }\n\n  // require either claim\n  [Authorize(Roles = "property-role,admin-property-role")]\n  public DbSet<Property> Properties { get; set; }\n  public DbSet<PropertyType> PropertyTypes { get; set; }\n  public DbSet<Location> Locations { get; set; }\n}\n\npublic class Property {\n  public uint Id { get; set; }\n  public string Name { get; set; }\n  public PropertyType Type { get; set; }\n  // require both claims\n  [Authorize(Roles = "property-admin")]\n  [Authorize(Roles = "super-admin")]\n  public Location Location { get; set; }\n}\n\n// ....\n')),(0,r.kt)("p",null,"You can secure whole types with the attribute too."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'[Authorize(Roles = "property-user")]\npublic class Property {\n  public uint Id { get; set; }\n  public string Name { get; set; }\n  public PropertyType Type { get; set; }\n  public Location Location { get; set; }\n}\n')),(0,r.kt)("p",null,"If a ",(0,r.kt)("inlineCode",{parentName:"p"},"ClaimsPrincipal")," is provided with the ",(0,r.kt)("inlineCode",{parentName:"p"},"ExecuteRequest")," call it will be required to be Authorized and have the Role ",(0,r.kt)("inlineCode",{parentName:"p"},"property-role")," to query the root-level ",(0,r.kt)("inlineCode",{parentName:"p"},"properties")," field and the role ",(0,r.kt)("inlineCode",{parentName:"p"},"property-admin")," to query the ",(0,r.kt)("inlineCode",{parentName:"p"},"Property")," field ",(0,r.kt)("inlineCode",{parentName:"p"},"location"),"."),(0,r.kt)("p",null,"Authorization can be provided in the API for add/replacing fields on the schema objact."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'schemaProvider.AddField("myField", (db) => db.MyEntities, "Description").RequiresAllRoles("admin");\nschemaProvider.AddField("myField", (db) => db.MyEntities, "Description").RequiresAnyRole("admin", "super-admin");\n\nschemaProvider.AddType<Property>("properties", (db) => db.Properties, "Description").RequiresAllRoles("property-user");\nschemaProvider.AddType<Property>("properties", (db) => db.Properties, "Description").RequiresAnyRole("property-user", "property-admin");\n')),(0,r.kt)("p",null,"Note when using ",(0,r.kt)("inlineCode",{parentName:"p"},"AddField()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"AddType()")," these functions will automatically search for ",(0,r.kt)("inlineCode",{parentName:"p"},"[Authorize()]")," attributes on the fields and types."),(0,r.kt)("h2",{id:"authorization-without-aspnet"},"Authorization without ASP.Net"),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLAuthorizeAttribute")," with role claims to provide authorization without the ASP.Net dependency."))}d.isMDXComponent=!0}}]);