"use strict";(self.webpackChunkentity_graphql_docs=self.webpackChunkentity_graphql_docs||[]).push([[981],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>m});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=o.createContext({}),c=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=c(e.components);return o.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},y=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),y=c(t),m=r,d=y["".concat(p,".").concat(m)]||y[m]||u[m]||a;return t?o.createElement(d,i(i({ref:n},l),{},{components:t})):o.createElement(d,i({ref:n},l))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=y;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}y.displayName="MDXCreateElement"},334:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var o=t(7462),r=(t(7294),t(3905));const a={},i="Using NewtonSoft JSON",s={unversionedId:"serialization-naming/newtonsoft-json",id:"serialization-naming/newtonsoft-json",title:"Using NewtonSoft JSON",description:"To avoid version conflicts with Newtonsoft.Json, EntityGraphQL has no reference to it and hence doesn't know what to do if it hits a Jtoken or JObject.",source:"@site/docs/serialization-naming/newtonsoft-json.md",sourceDirName:"serialization-naming",slug:"/serialization-naming/newtonsoft-json",permalink:"/docs/serialization-naming/newtonsoft-json",draft:!1,editUrl:"https://github.com/EntityGraphQL/EntityGraphQL/tree/master/docs/docs/serialization-naming/newtonsoft-json.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Serialization & Field Naming",permalink:"/docs/serialization-naming/"},next:{title:"Authorization",permalink:"/docs/authorization"}},p={},c=[],l={toc:c};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"using-newtonsoft-json"},"Using NewtonSoft JSON"),(0,r.kt)("p",null,"To avoid version conflicts with Newtonsoft.Json, EntityGraphQL has no reference to it and hence doesn't know what to do if it hits a ",(0,r.kt)("inlineCode",{parentName:"p"},"Jtoken")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"JObject"),"."),(0,r.kt)("p",null,"If you are not using EntityGraphQL.AspNet and are trying to deserialize incoming JSON into the ",(0,r.kt)("inlineCode",{parentName:"p"},"QueryRequest")," and you have objects in the variables field Newtonsoft.Json will deserialize the incoming JSON objects into the variables dictionary as ",(0,r.kt)("inlineCode",{parentName:"p"},"JObject"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"JToken")," types and EntityGraphQL doesn't know what to do with them when trying to mapping them to the field arguments."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note many JSON libraries will convert sub objects/arrays/etc into their own custom types when dealing with a ",(0,r.kt)("inlineCode",{parentName:"em"},"Dictionary<string, object>"),". This can be used as an example to build other converters.")),(0,r.kt)("p",null,"You can tell EntityGraphQL how to convert types when it is mapping incoming data classes/arguments using the ",(0,r.kt)("inlineCode",{parentName:"p"},"AddCustomTypeConverter(new MyICustomTypeConverter())")," on the schema provider."),(0,r.kt)("p",null,"Here is an example to use this to handle Newtonsoft.Json types:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"internal class JObjectTypeConverter : ICustomTypeConverter\n{\n    public Type Type => typeof(JObject);\n\n    public object ChangeType(object value, Type toType, ISchemaProvider schema)\n    {\n        return ((JObject)value).ToObject(toType);\n    }\n}\n\ninternal class JTokenTypeConverter : ICustomTypeConverter\n{\n    public Type Type => typeof(JToken);\n\n    public object ChangeType(object value, Type toType, ISchemaProvider schema)\n    {\n        return ((JToken)value).ToObject(toType);\n    }\n}\n\ninternal class JValueTypeConverter : ICustomTypeConverter\n{\n    public Type Type => typeof(JValue);\n\n    public object ChangeType(object value, Type toType, ISchemaProvider schema)\n    {\n        return ((JValue)value).ToString();\n    }\n}\n\n// Where you build schema\n\nschema.AddCustomTypeConverter(new JObjectTypeConverter());\nschema.AddCustomTypeConverter(new JTokenTypeConverter());\nschema.AddCustomTypeConverter(new JValueTypeConverter());\n")),(0,r.kt)("p",null,"Now EntityGraphQL can convert ",(0,r.kt)("inlineCode",{parentName:"p"},"JObject"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"JToken")," & ",(0,r.kt)("inlineCode",{parentName:"p"},"JValue")," types to classes/types using your version of Newtonsoft.Json. You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"ICustomTypeConverter")," to handle any customer conversion."))}u.isMDXComponent=!0}}]);