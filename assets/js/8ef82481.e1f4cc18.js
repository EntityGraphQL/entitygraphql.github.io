"use strict";(self.webpackChunkentity_graphql_docs=self.webpackChunkentity_graphql_docs||[]).push([[587],{6266:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"integration","title":"Tool integration","description":"Being GraphQL there are many tools that integrate well with EntityGraphQL.","source":"@site/docs/integration.md","sourceDirName":".","slug":"/integration","permalink":"/docs/integration","draft":false,"unlisted":false,"editUrl":"https://github.com/EntityGraphQL/EntityGraphQL/tree/master/docs/docs/integration.md","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"sidebar_position":11},"sidebar":"tutorialSidebar","previous":{"title":"Reusing Linq Expressions","permalink":"/docs/library-compatibility/expression-reuse"},"next":{"title":"Upgrading from 4.x to 5.x","permalink":"/docs/upgrade-5-0"}}');var r=t(4848),o=t(8453);const s={sidebar_position:11},a="Tool integration",l={},c=[{value:"Query Information &amp; Monitoring",id:"query-information--monitoring",level:2},{value:"Enabling Query Information",id:"enabling-query-information",level:3},{value:"ASP.NET Integration",id:"aspnet-integration",level:3},{value:"Query Information Output",id:"query-information-output",level:3},{value:"Query Information Properties",id:"query-information-properties",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"tool-integration",children:"Tool integration"})}),"\n",(0,r.jsx)(n.p,{children:"Being GraphQL there are many tools that integrate well with EntityGraphQL."}),"\n",(0,r.jsx)(n.p,{children:"EntityGraphQL supports GraphQL introspection queries so tools like GraphiQL etc can work against your schema."}),"\n",(0,r.jsxs)(n.p,{children:["You can use ",(0,r.jsx)(n.code,{children:"schema.ToGraphQLSchemaString()"})," to produce a GraphQL schema file. This works well as input to the Apollo code gen tools."]}),"\n",(0,r.jsx)(n.h2,{id:"query-information--monitoring",children:"Query Information & Monitoring"}),"\n",(0,r.jsxs)(n.p,{children:["EntityGraphQL can provide detailed information about executed queries through the ",(0,r.jsx)(n.code,{children:"QueryInfo"})," feature. This is useful for:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Query analysis and optimization"}),"\n",(0,r.jsx)(n.li,{children:"Debugging complex queries"}),"\n",(0,r.jsx)(n.li,{children:"Monitoring GraphQL usage patterns"}),"\n",(0,r.jsx)(n.li,{children:"Understanding which types and fields are being accessed"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"enabling-query-information",children:"Enabling Query Information"}),"\n",(0,r.jsxs)(n.p,{children:["To include query execution information in your results, set ",(0,r.jsx)(n.code,{children:"IncludeQueryInfo = true"})," in your execution options:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cs",children:"var options = new ExecutionOptions\n{\n    IncludeQueryInfo = true\n};\n\nvar result = schema.ExecuteRequestWithContext(request, context, serviceProvider, user, options);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"aspnet-integration",children:"ASP.NET Integration"}),"\n",(0,r.jsx)(n.p,{children:"When using EntityGraphQL.AspNet, you can enable query info globally:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cs",children:"app.MapGraphQL<DemoContext>(options: new ExecutionOptions\n{\n    IncludeQueryInfo = true\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"query-information-output",children:"Query Information Output"}),"\n",(0,r.jsxs)(n.p,{children:["When enabled, query information is included in the ",(0,r.jsx)(n.code,{children:"extensions"})," field of the GraphQL response:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "data": {\n    "people": [{ "name": "John", "projects": [{ "name": "Project A" }] }]\n  },\n  "extensions": {\n    "queryInfo": {\n      "operationType": "Query",\n      "operationName": "GetPeople",\n      "totalTypesQueried": 3, // Includes the Query Type\n      "totalFieldsQueried": 6,\n      "typesQueried": {\n        "Query": ["people"],\n        "Person": ["name", "projects"],\n        "Project": ["name"]\n      }\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"query-information-properties",children:"Query Information Properties"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"operationType"}),": The type of GraphQL operation (Query, Mutation, or Subscription)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"operationName"}),": The name of the operation (if provided in the query)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"totalTypesQueried"}),": Total number of types accessed in the query"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"totalFieldsQueried"}),": Total number of fields selected across all types"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"typesQueried"}),": Dictionary mapping type names to the list of fields selected from each type"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Note: Fragment spreads are expanded and their fields are counted, but the fragment spread itself is not counted as a field."})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(6540);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);