"use strict";(self.webpackChunkentity_graphql_docs=self.webpackChunkentity_graphql_docs||[]).push([[916],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(t),m=a,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||l;return t?r.createElement(f,i(i({ref:n},c),{},{components:t})):r.createElement(f,i({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[d]="string"==typeof e?e:a,i[1]=o;for(var p=2;p<l;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8448:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const l={sidebar_position:8},i="Lists and Non-Null",o={unversionedId:"schema-creation/lists-and-nonnulls",id:"schema-creation/lists-and-nonnulls",title:"Lists and Non-Null",description:"GraphQL defines type modifiers specifically for declaring that a field is a list or cannot be null. In a schema these are [T] and !. For example, a GraphQL schema might have the following.",source:"@site/docs/schema-creation/lists-and-nonnulls.md",sourceDirName:"schema-creation",slug:"/schema-creation/lists-and-nonnulls",permalink:"/docs/schema-creation/lists-and-nonnulls",draft:!1,editUrl:"https://github.com/EntityGraphQL/EntityGraphQL/tree/master/docs/docs/schema-creation/lists-and-nonnulls.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Union Types",permalink:"/docs/schema-creation/union-types"},next:{title:"Directives",permalink:"/docs/schema-creation/directives"}},s={},p=[],c={toc:p},d="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"lists-and-non-null"},"Lists and Non-Null"),(0,a.kt)("p",null,"GraphQL defines ",(0,a.kt)("a",{parentName:"p",href:"https://graphql.org/learn/schema/#lists-and-non-null"},"type modifiers")," specifically for declaring that a field is a list or cannot be ",(0,a.kt)("inlineCode",{parentName:"p"},"null"),". In a schema these are ",(0,a.kt)("inlineCode",{parentName:"p"},"[T]")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"!"),". For example, a GraphQL schema might have the following."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"enum Gender {\n  Female\n  Male\n  NotSpecified\n}\n\ntype Person {\n  firstName: String!\n  lastName: String!\n  gender: Gender!\n  friends: [Person]\n}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"!")," on all the fields tells API users that those fields will not be ",(0,a.kt)("inlineCode",{parentName:"p"},"null"),". And the ",(0,a.kt)("inlineCode",{parentName:"p"},"[]")," around the ",(0,a.kt)("inlineCode",{parentName:"p"},"Person")," type on the ",(0,a.kt)("inlineCode",{parentName:"p"},"friends")," field types the API users that the field returns a list of ",(0,a.kt)("inlineCode",{parentName:"p"},"Person")," objects."),(0,a.kt)("p",null,"EntityGraphQL will automatically figure out fields that return lists based on if the resolve expression returns ",(0,a.kt)("inlineCode",{parentName:"p"},"IEnumerable<T>"),"."),(0,a.kt)("p",null,"Similarly, EntityGraphQL will mark non-nullable .NET types as non-null in thr GraphQL schema. If you need to change that, you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"field.IsNullable(bool)"),"."),(0,a.kt)("p",null,"Lets say we know a person's first and last name will never be null."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'var type = schema.AddInputType<Person>("PersonInput", "New person data")\ntype.AddField("firstName", p => p.FirstName, "First name).IsNullable(false);\ntype.AddField("lastName", p => p.LastName, "Last name).IsNullable(false);\n')))}u.isMDXComponent=!0}}]);