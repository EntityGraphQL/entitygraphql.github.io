"use strict";(self.webpackChunkentity_graphql_docs=self.webpackChunkentity_graphql_docs||[]).push([[267],{5813:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>p});var n=t(4848),s=t(8453);const r={},o="Optimizing Expressions",a={id:"library-compatibility/expression-optimizers",title:"Optimizing Expressions",description:"- Linq.Expression.Optimizer",source:"@site/docs/library-compatibility/expression-optimizers.md",sourceDirName:"library-compatibility",slug:"/library-compatibility/expression-optimizers",permalink:"/docs/library-compatibility/expression-optimizers",draft:!1,unlisted:!1,editUrl:"https://github.com/EntityGraphQL/EntityGraphQL/tree/master/docs/docs/library-compatibility/expression-optimizers.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"NewtonSoft JSON",permalink:"/docs/library-compatibility/newtonsoft-json"},next:{title:"Reusing Linq Expressions",permalink:"/docs/library-compatibility/expression-reuse"}},c={},p=[];function l(e){const i={a:"a",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.header,{children:(0,n.jsx)(i.h1,{id:"optimizing-expressions",children:"Optimizing Expressions"})}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.a,{href:"https://thorium.github.io/Linq.Expression.Optimizer/",children:"Linq.Expression.Optimizer"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.a,{href:"https://github.com/nessos/LinqOptimizer",children:"Linq Optimizer"})}),"\n"]}),"\n",(0,n.jsxs)(i.p,{children:["EQL has a global BeforeExecuting hook on ",(0,n.jsx)(i.code,{children:"ExecutionOptions"})," allowing you to intercept expressions before they are executed and modify them. ",(0,n.jsx)(i.strong,{children:"Linq.Expression.Optimizer"})," contains an expression tree visitor allowing you to simply:"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-cs",children:"  var options = new EntityGraphQL.Schema.ExecutionOptions();\n  options.BeforeExecuting += (expression, isFinal) =>\n  {\n      // isFinal == true if the expression is the final execution - this means\n      //  - ExecuteServiceFieldsSeparately = false, or\n      //  - The query does not reference any fields with services\n      //  - The query references fields with service and the first execution has completed (isFinal == false) and we are executing again to merge the service results\n      return ExpressionOptimizer.visit(expression);\n  };\n"})}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"Linq Optimizer"})," appears to use expression methods on ",(0,n.jsx)(i.code,{children:"IEnumerable<T>"})," which isn't directly compatible with this approach (there are expression trees in the project so it may work if you can use a lower level api call), you would need to test that the return type of expression is compatible."]})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,i,t)=>{t.d(i,{R:()=>o,x:()=>a});var n=t(6540);const s={},r=n.createContext(s);function o(e){const i=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(r.Provider,{value:i},e.children)}}}]);