"use strict";(self.webpackChunkentity_graphql_docs=self.webpackChunkentity_graphql_docs||[]).push([[120],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(r),h=i,m=d["".concat(c,".").concat(h)]||d[h]||p[h]||a;return r?n.createElement(m,o(o({ref:t},u),{},{components:r})):n.createElement(m,o({ref:t},u))}));function h(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6173:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=r(7462),i=(r(7294),r(3905));const a={sidebar_position:8},o="Directives",s={unversionedId:"schema-creation/directives",id:"schema-creation/directives",title:"Directives",description:"Directives provide a way to dynamically change the structure and shape of our queries using variables. An example from the GraphQL website:",source:"@site/docs/schema-creation/directives.md",sourceDirName:"schema-creation",slug:"/schema-creation/directives",permalink:"/docs/schema-creation/directives",draft:!1,editUrl:"https://github.com/EntityGraphQL/EntityGraphQL/tree/master/docs/docs/schema-creation/directives.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Lists and Non-Null",permalink:"/docs/schema-creation/lists-and-nonnulls"},next:{title:"Adding Other Data Sources",permalink:"/docs/schema-creation/other-data-sources"}},c={},l=[{value:"Built-In Directives",id:"built-in-directives",level:2},{value:"Custom Directives",id:"custom-directives",level:2}],u={toc:l};function p(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"directives"},"Directives"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://graphql.org/learn/queries/#directives"},"Directives")," provide a way to dynamically change the structure and shape of our queries using variables. An example from the GraphQL website:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"query Hero($episode: Episode, $withFriends: Boolean!) {\n  hero(episode: $episode) {\n    name\n    friends @include(if: $withFriends) {\n      name\n    }\n  }\n}\n")),(0,i.kt)("p",null,"Now if you set ",(0,i.kt)("inlineCode",{parentName:"p"},"withFriends")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," in the variables passed with the query POST you'll get the ",(0,i.kt)("inlineCode",{parentName:"p"},"friends")," result. If you set it to ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," you will not. Thus dynamically changing the shape of your query."),(0,i.kt)("h2",{id:"built-in-directives"},"Built-In Directives"),(0,i.kt)("p",null,"The GraphQL spec defines 2 directives that are supported out of the box in EntityGraphQL."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@include(if: Boolean)")," - Only include this field in the result if the argument is true."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@skip(if: Boolean)")," - Skip this field if the argument is true.")),(0,i.kt)("h2",{id:"custom-directives"},"Custom Directives"),(0,i.kt)("p",null,"See the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/lukemurray/EntityGraphQL/blob/master/src/EntityGraphQL/Directives/IncludeDirectiveProcessor.cs"},"IncludeDirective")," implementation to see how you could implement a custom directive. You can add your directive to the schema with the following"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"// Example only, you don't need to actually add Include or Skip directives\nschema.AddDirective(new IncludeDirective());\n")),(0,i.kt)("p",null,"These directives work on the internal representation of a field ",(0,i.kt)("inlineCode",{parentName:"p"},"GraphQLQueryNode"),". This is working against the query graph not the data result."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"There is more functionality planned for custom directives which can work on both the pre-execution query graph or the post-execution data.")))}p.isMDXComponent=!0}}]);