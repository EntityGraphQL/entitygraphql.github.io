"use strict";(self.webpackChunkentity_graphql_docs=self.webpackChunkentity_graphql_docs||[]).push([[27],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),p=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,h=d["".concat(o,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(h,s(s({ref:t},l),{},{components:n})):r.createElement(h,s({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=d;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:a,s[1]=c;for(var p=2;p<i;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1172:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:6},s="Interfaces Types & Implements Keyword",c={unversionedId:"schema-creation/interface-and-union-types",id:"schema-creation/interface-and-union-types",title:"Interfaces Types & Implements Keyword",description:"GraphQL supports Interfaces allowing you to define a abstract base type that multiple other types might implement.",source:"@site/docs/schema-creation/interface-and-union-types.md",sourceDirName:"schema-creation",slug:"/schema-creation/interface-and-union-types",permalink:"/docs/schema-creation/interface-and-union-types",draft:!1,editUrl:"https://github.com/EntityGraphQL/EntityGraphQL/tree/master/docs/docs/schema-creation/interface-and-union-types.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Input Types",permalink:"/docs/schema-creation/input-types"},next:{title:"Union Types",permalink:"/docs/schema-creation/union-types"}},o={},p=[],l={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"interfaces-types--implements-keyword"},"Interfaces Types & Implements Keyword"),(0,a.kt)("p",null,"GraphQL supports ",(0,a.kt)("a",{parentName:"p",href:"https://graphql.org/learn/schema/#interfaces"},"Interfaces")," allowing you to define a abstract base type that multiple other types might implement."),(0,a.kt)("p",null,"EntityGraphQL automatically marks abstract classes and interfaces as GraphQL interfaces; however, you can also add them manually to a schema with the AddInterface method on the SchemaProvider class."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'public abstract class Character {\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public IEnumerable<Character> Friends { get; set; }\n    public IEnumerable<Episode> AppearsIn { get; set; }\n}\n\npublic class Human : Character {\n  public IEnumerable<Starship> starships { get; set; }\n  public int TotalCredits { get; set;}\n}\n\npublic class Droid : Character {\n    public stirng PrimaryFunction { get; set;}\n}\n\n// creating our schema\nschema.AddInterface<Character>(name: "Character", description: "represents any character in the Star Wars trilogy");\n    .AddAllFields();\n\nschema.AddType<Human>("")\n    .AddAllFields()\n    .Implements<Character>();\n\nschema.AddType<Droid>("");\n    .Implements<Character>();\n')),(0,a.kt)("p",null,"produces the GraphQL schema:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"interface Character {\n  id: ID!\n  name: String!\n  friends: [Character]\n  appearsIn: [Episode]!\n}\n\ntype Human implements Character {\n  id: ID!\n  name: String!\n  friends: [Character]\n  appearsIn: [Episode]!\n  starships: [Starship]\n  totalCredits: Int\n}\n\ntype Droid implements Character {\n  id: ID!\n  name: String!\n  friends: [Character]\n  appearsIn: [Episode]!\n  primaryFunction: String\n}\n")),(0,a.kt)("p",null,"You can query these types with inline fragments;"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  characters {\n    name\n    ... on Human {\n      totalCredits\n    }\n    ... on Droid {\n      primaryFunction\n    }\n  }\n}\n")),(0,a.kt)("h1",{id:"union-types"},"Union Types"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://graphql.org/learn/schema/#union-types"},"Union Types")," are very similar to interfaces, but they don't get to specify any common fields between the types."),(0,a.kt)("p",null,"Any abstract class or interface automatically added by the SchemaBuilder that contains no properties is added as a union instead of an interface (interfaces require at least one field)."),(0,a.kt)("p",null,"You can register union types manually using the ",(0,a.kt)("inlineCode",{parentName:"p"},"AddUnion")," method on SchemaProvider, then register potential types on the union type using the ",(0,a.kt)("inlineCode",{parentName:"p"},"SchemaField.AddPossibleType")," method.  This differs from interfaces in that you register the child classes on the parent instead of the parent on the children."),(0,a.kt)("p",null,"As C# does not support anything like union types they are implemented used blank 'marker interfaces'"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'public interface ICharacter { }\npublic class Human : ICharacter {\n    ...\n}\npublic class Droid : ICharacter {\n    ...\n}\n// creating our schema\nvar union = schema.AddUnion<ICharacter>(name: "Character", description: "represents any character in the Star Wars trilogy");\n        \n    schema.Type<ICharacter>.AddPotentialType<Human>();\n    schema.Type<ICharacter>.AddPotentialType<Droid>();\n')))}u.isMDXComponent=!0}}]);