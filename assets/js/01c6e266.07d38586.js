"use strict";(self.webpackChunkentity_graphql_docs=self.webpackChunkentity_graphql_docs||[]).push([[9672],{3921:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var i=n(4848),r=n(8453);const s={},o="Reusing Linq Expressions",a={id:"library-compatibility/expression-reuse",title:"Reusing Linq Expressions",description:"Computed properties don't work with most Linq providers out of the box. Dave Glick has a great related post on Computed Properties and EntityFramework.",source:"@site/docs/library-compatibility/expression-reuse.md",sourceDirName:"library-compatibility",slug:"/library-compatibility/expression-reuse",permalink:"/docs/library-compatibility/expression-reuse",draft:!1,unlisted:!1,editUrl:"https://github.com/EntityGraphQL/EntityGraphQL/tree/master/docs/docs/library-compatibility/expression-reuse.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Optimizing Expressions",permalink:"/docs/library-compatibility/expression-optimizers"},next:{title:"Tool integration",permalink:"/docs/integration"}},l={},c=[];function p(e){const t={a:"a",code:"code",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"reusing-linq-expressions",children:"Reusing Linq Expressions"})}),"\n",(0,i.jsxs)(t.p,{children:["Computed properties don't work with most Linq providers out of the box. Dave Glick has a great related post on ",(0,i.jsx)(t.a,{href:"https://www.daveaglick.com/posts/computed-properties-and-entity-framework",children:"Computed Properties and EntityFramework"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"Here's a list of various libraries that can help"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://github.com/koenbeuk/EntityFrameworkCore.Projectables",children:"EntityFrameworkCore.Projectables"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://nein.tech/nein-linq/",children:"Nein Linq"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://github.com/ClaveConsulting/Expressionify",children:"Expressionify"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://github.com/scottksmith95/LINQKit",children:"LinqKit"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://github.com/hazzik/DelegateDecompiler",children:"Delegate Decompiler"})}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["Most the these libraries work in a similar ways - examples below are using the syntax from ",(0,i.jsx)(t.a,{href:"https://github.com/koenbeuk/EntityFrameworkCore.Projectables",children:"EntityFrameworkCore.Projectables"}),"."]}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Either globally register the library when registering the context"}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cs",children:'services.AddDbContext<DemoContext>(opt =>\n  opt.UseSqlite("Filename=demo.db")\n  // highlight-next-line\n    .UseProjectables()\n);\n'})}),"\n",(0,i.jsx)(t.p,{children:"or enable it per expression."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cs",children:"dbContext.People\n// highlight-next-line\n  .ExpandProjectables()\n  .Select(x => x.Age())\n"})}),"\n",(0,i.jsx)(t.p,{children:"If you go down the route of registering it per query then you'll need to override the resolve method on the relevant fields on the EQL Schema."}),"\n",(0,i.jsxs)(t.ol,{start:"2",children:["\n",(0,i.jsx)(t.li,{children:"Add an expression bodied function to the entity class or helper class (generally be static or instance) and mark it using an attribute."}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cs",children:"[Projectable]\n[GraphQLField]\npublic static int Age(this Person person) => (int)((DateTime.Now - person.Dob).TotalDays / 365);\n"})}),"\n",(0,i.jsx)(t.p,{children:"Some libraries will automatically convert this to an expression property using Source Generators (EFC.Projectables, Expressionfy) or reflection/decompilation (Delegate Decompiler), yet others require you to provide both the method and expression yourself (Nein Linq)."}),"\n",(0,i.jsxs)(t.p,{children:["This field is now available to queries (exposed via the ",(0,i.jsx)(t.code,{children:"[GraphQLField]"})," attribute). ",(0,i.jsx)(t.code,{children:"Projectable"}),"s provide reuse of common expression that can also be used outside on EntityGraphQL or in your mutations as well."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cs",children:'public class PeopleMutations\n{\n    [GraphQLMutation("Add a new person to the system")]\n    public Expression<Func<DemoContext, Person>> UpdatePerson(DemoContext db, int id, string firstName, string lastName)\n    {\n        var person = db.People.Select(p => {\n            p.FirstName,\n            p.LastName,\n// highlight-next-line\n            p.Age()\n        });\n\n        ...\n    }\n}\n'})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var i=n(6540);const r={},s=i.createContext(r);function o(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);