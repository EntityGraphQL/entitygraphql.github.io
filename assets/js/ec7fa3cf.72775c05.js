"use strict";(self.webpackChunkentity_graphql_docs=self.webpackChunkentity_graphql_docs||[]).push([[211],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>y});var i=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,i,n=function(e,t){if(null==e)return{};var r,i,n={},o=Object.keys(e);for(i=0;i<o.length;i++)r=o[i],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)r=o[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=i.createContext({}),l=function(e){var t=i.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=l(e.components);return i.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,p=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),m=l(r),y=n,f=m["".concat(p,".").concat(y)]||m[y]||u[y]||o;return r?i.createElement(f,s(s({ref:t},c),{},{components:r})):i.createElement(f,s({ref:t},c))}));function y(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,s=new Array(o);s[0]=m;var a={};for(var p in t)hasOwnProperty.call(t,p)&&(a[p]=t[p]);a.originalType=e,a.mdxType="string"==typeof e?e:n,s[1]=a;for(var l=2;l<o;l++)s[l]=r[l];return i.createElement.apply(null,s)}return i.createElement.apply(null,r)}m.displayName="MDXCreateElement"},180:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var i=r(7462),n=(r(7294),r(3905));const o={},s="Optimizing Expressions",a={unversionedId:"library-compatibility/expression-optimizers",id:"library-compatibility/expression-optimizers",title:"Optimizing Expressions",description:"- Linq.Expression.Optimizer",source:"@site/docs/library-compatibility/expression-optimizers.md",sourceDirName:"library-compatibility",slug:"/library-compatibility/expression-optimizers",permalink:"/docs/library-compatibility/expression-optimizers",draft:!1,editUrl:"https://github.com/EntityGraphQL/EntityGraphQL/tree/master/docs/docs/library-compatibility/expression-optimizers.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"NewtonSoft JSON",permalink:"/docs/library-compatibility/newtonsoft-json"},next:{title:"Reusing Linq Expressions",permalink:"/docs/library-compatibility/expression-reuse"}},p={},l=[],c={toc:l};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,i.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"optimizing-expressions"},"Optimizing Expressions"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://thorium.github.io/Linq.Expression.Optimizer/"},"Linq.Expression.Optimizer")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/nessos/LinqOptimizer"},"Linq Optimizer"))),(0,n.kt)("p",null,"EQL has a global BeforeExecuting hook on ",(0,n.kt)("inlineCode",{parentName:"p"},"ExecutionOptions")," allowing you to intercept expressions before they are executed and modify them. ",(0,n.kt)("strong",{parentName:"p"},"Linq.Expression.Optimizer")," contains an expression tree visitor allowing you to simply:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"  var options = new EntityGraphQL.Schema.ExecutionOptions();\n  options.BeforeExecuting += (expression, isFinal) =>\n  {\n      // isFinal == true if the expression is the final execution - this means\n      //  - ExecuteServiceFieldsSeparately = false, or\n      //  - The query does not reference any fields with services\n      //  - The query references fields with service and the first execution has completed (isFinal == false) and we are executing again to merge the service results\n      return ExpressionOptimizer.visit(expression);\n  };\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Linq Optimizer")," appears to use expression methods on ",(0,n.kt)("inlineCode",{parentName:"p"},"IEnumerable<T>")," which isn't directly compatible with this approach (there are expression trees in the project so it may work if you can use a lower level api call), you would need to test that the return type of expression is compatible."))}u.isMDXComponent=!0}}]);