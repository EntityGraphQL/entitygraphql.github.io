"use strict";(self.webpackChunkentity_graphql_docs=self.webpackChunkentity_graphql_docs||[]).push([[25],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var i=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,l=function(e,t){if(null==e)return{};var n,i,l={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(n),c=l,k=m["".concat(s,".").concat(c)]||m[c]||d[c]||r;return n?i.createElement(k,a(a({ref:t},u),{},{components:n})):i.createElement(k,a({ref:t},u))}));function c(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,a=new Array(r);a[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,a[1]=o;for(var p=2;p<r;p++)a[p]=n[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6320:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var i=n(7462),l=(n(7294),n(3905));const r={sidebar_position:1},a="Filtering",o={unversionedId:"field-extensions/filtering",id:"field-extensions/filtering",title:"Filtering",description:"To quickly add filtering capabilities to your collection fields use the UseFilter() field extension.",source:"@site/docs/field-extensions/filtering.md",sourceDirName:"field-extensions",slug:"/field-extensions/filtering",permalink:"/docs/field-extensions/filtering",draft:!1,editUrl:"https://github.com/EntityGraphQL/EntityGraphQL/tree/master/docs/docs/field-extensions/filtering.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Field Extensions",permalink:"/docs/field-extensions/"},next:{title:"Sorting",permalink:"/docs/field-extensions/sorting"}},s={},p=[],u={toc:p};function d(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"filtering"},"Filtering"),(0,l.kt)("p",null,"To quickly add filtering capabilities to your collection fields use the ",(0,l.kt)("inlineCode",{parentName:"p"},"UseFilter()")," field extension."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},'schema.ReplaceField("people",\n    ctx => ctx.People,\n    "Return a list of people. Optional filtered")\n    .UseFilter();\n')),(0,l.kt)("p",null,"If you are using the ",(0,l.kt)("inlineCode",{parentName:"p"},"SchemaBuilder.FromObject")," you can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"UseFilterAttribute")," on your collection properties."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},"public class DemoContext : DbContext\n{\n    [UseFilter]\n    public DbSet<Movie> Movies { get; set; }\n    [UseFilter]\n    public DbSet<Person> People { get; set; }\n    [UseFilter]\n    public DbSet<Actor> Actors { get; set; }\n}\n")),(0,l.kt)("p",null,"This field extension can only be used on a field that has a ",(0,l.kt)("inlineCode",{parentName:"p"},"Resolve")," expression that is assignable to ",(0,l.kt)("inlineCode",{parentName:"p"},"IEnumerable")," - I.e. collections. The extension adds an argument called ",(0,l.kt)("inlineCode",{parentName:"p"},"filter: String"),"."),(0,l.kt)("p",null,"Note: When using with the paging or sort extensions ensure you call ",(0,l.kt)("inlineCode",{parentName:"p"},"UseFilter")," before both others. If you are using the attribute, then ensure the Filter attribute comes before the other attributes."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"filter")," argument takes a string that will be compiled to an expression and inserted into a ",(0,l.kt)("inlineCode",{parentName:"p"},"Where()")," call. The expression is compiled against your schema and the context is the type of elements in the collection."),(0,l.kt)("p",null,"For example, given ",(0,l.kt)("inlineCode",{parentName:"p"},"ctx => ctx.People")," returns a ",(0,l.kt)("inlineCode",{parentName:"p"},"IEnumerable<Person>")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Person")," is defined as:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},"public class Person\n{\n    public uint Id { get; set; }\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    public DateTime Dob { get; set; }\n    public List<Actor> ActorIn { get; set; }\n    public List<Writer> WriterOf { get; set; }\n    public List<Movie> DirectorOf { get; set; }\n    public DateTime? Died { get; set; }\n    public bool IsDeleted { get; set; }\n}\n")),(0,l.kt)("p",null,"We can write some filter expressions like so:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  people(filter: "id == 12 || id == 10") {\n    firstName\n  }\n}\n\n{\n  deletedPeople: people(filter: "isDeleted == true") {\n    firstName\n  }\n}\n\n{\n  people(filter: "dob > \\"2010-08-11T00:00:00\\" && isDeleted == false") {\n    firstName\n  }\n}\n')),(0,l.kt)("p",null,"The expression language supports the following constants:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Booleans - ",(0,l.kt)("inlineCode",{parentName:"li"},"true")," & ",(0,l.kt)("inlineCode",{parentName:"li"},"false")),(0,l.kt)("li",{parentName:"ul"},"Integers - e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"2"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"-8")),(0,l.kt)("li",{parentName:"ul"},"Floats - e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"0.2"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"-8.3")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"null")),(0,l.kt)("li",{parentName:"ul"},"Strings - ",(0,l.kt)("inlineCode",{parentName:"li"},'"within double quotes"'),"; when representing a date, use an ISO 8601 format such as ",(0,l.kt)("inlineCode",{parentName:"li"},'"2022-07-31T20:00:00"'))),(0,l.kt)("p",null,"The expression language supports the following operators:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-")," - Subtraction"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"+")," - Addition"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"*")," - Multiply"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"/")," - Divide"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"%")," - Mod"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"^")," - Power"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"==")," - Equals"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"!=")," - Not Equals"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"<=")," - Less than or equal to"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},">=")," - Greater than or equal to"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"<")," - Less than"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},">")," - Greater than"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"or")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"||")," - Or"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"and")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"&&")," - And")),(0,l.kt)("p",null,"The expression language supports the following methods:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"List.where(filter)"),", or ",(0,l.kt)("inlineCode",{parentName:"li"},"List.filter(filter)")," - Filter the list"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"List.any(filter)")," - Return ",(0,l.kt)("inlineCode",{parentName:"li"},"true")," if any of the items in the list match the filter. Otherwise ",(0,l.kt)("inlineCode",{parentName:"li"},"false")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"List.first(filter?)")," - Return the first item from a list. Optionally by a filter"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"List.last(filter?)")," - Return the last item from a list. Optionally by a filter"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"List.take(int)")," - Return the first ",(0,l.kt)("inlineCode",{parentName:"li"},"x")," items"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"List.skip(int)")," - Return the items after ",(0,l.kt)("inlineCode",{parentName:"li"},"x")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"List.count(filter?)")," - Return the count of a list. Optionally counting items that match a filter"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"List.orderBy(field)")," - Order the list by a given field"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"List.orderByDesc(field)")," - Order the list in reverse by a given field"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string.contains(string)")," - Return ",(0,l.kt)("inlineCode",{parentName:"li"},"true")," if the specified string occurs in this string instance"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string.startsWith(string)")," - Return ",(0,l.kt)("inlineCode",{parentName:"li"},"true")," if the beginning of this string instance matches the specified string"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string.endsWith(string)")," - Return ",(0,l.kt)("inlineCode",{parentName:"li"},"true")," if the end of this string instance matches the specified string"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string.toLower()")," - Return the string converted to lowercase"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string.toUpper()")," - Return the string converted to uppercase")),(0,l.kt)("p",null,"The expression language supports ternary and conditional:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"__ ? __ : __")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"if __ then __ else __"))))}d.isMDXComponent=!0}}]);