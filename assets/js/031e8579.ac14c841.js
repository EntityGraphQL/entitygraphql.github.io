"use strict";(self.webpackChunkentity_graphql_docs=self.webpackChunkentity_graphql_docs||[]).push([[9079],{5852:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"schema-creation/union-types","title":"Union Types","description":"Union Types are very similar to interfaces, but they don\'t get to specify any common fields between the types.","source":"@site/docs/schema-creation/union-types.md","sourceDirName":"schema-creation","slug":"/schema-creation/union-types","permalink":"/docs/schema-creation/union-types","draft":false,"unlisted":false,"editUrl":"https://github.com/EntityGraphQL/EntityGraphQL/tree/master/docs/docs/schema-creation/union-types.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Interfaces Types & Implements Keyword","permalink":"/docs/schema-creation/interface-types"},"next":{"title":"Lists and Non-Null","permalink":"/docs/schema-creation/lists-and-nonnulls"}}');var r=t(4848),a=t(8453);const i={sidebar_position:7},o="Union Types",c={},d=[];function h(e){const n={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"union-types",children:"Union Types"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://graphql.org/learn/schema/#union-types",children:"Union Types"})," are very similar to interfaces, but they don't get to specify any common fields between the types."]}),"\n",(0,r.jsx)(n.p,{children:"Any abstract class or interface automatically added by the SchemaBuilder that contains no properties is added as a union instead of an interface (interfaces require at least one field)."}),"\n",(0,r.jsxs)(n.p,{children:["You can register union types manually using the ",(0,r.jsx)(n.code,{children:"AddUnion"})," method on SchemaProvider, then register potential types on the union type using the ",(0,r.jsx)(n.code,{children:"SchemaField.AddPossibleType"})," method. This differs from interfaces in that you register the child classes on the parent instead of the parent on the children."]}),"\n",(0,r.jsx)(n.p,{children:"As C# does not support anything like union types they are implemented used blank 'marker interfaces'"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cs",children:'public interface ICharacter { }\npublic class Human : ICharacter {\n    ...\n}\npublic class Droid : ICharacter {\n    ...\n}\n// creating our schema\nvar union = schema.AddUnion<ICharacter>(name: "Character", description: "represents any character in the Star Wars trilogy");\n\nschema.Type<ICharacter>().AddPossibleType<Human>();\nschema.Type<ICharacter>().AddPossibleType<Droid>();\n'})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var s=t(6540);const r={},a=s.createContext(r);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);