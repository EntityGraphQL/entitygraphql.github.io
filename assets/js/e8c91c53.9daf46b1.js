"use strict";(self.webpackChunkentity_graphql_docs=self.webpackChunkentity_graphql_docs||[]).push([[9188],{7284:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>c,toc:()=>d});var s=t(4848),r=t(8453);const a={sidebar_position:4},o="Enum Types",c={id:"schema-creation/enum-types",title:"Enum Types",description:"Enum types are just like you'd expect. It let's API consumers know that a field can be only 1 of a set of values.",source:"@site/docs/schema-creation/enum-types.md",sourceDirName:"schema-creation",slug:"/schema-creation/enum-types",permalink:"/docs/schema-creation/enum-types",draft:!1,unlisted:!1,editUrl:"https://github.com/EntityGraphQL/EntityGraphQL/tree/master/docs/docs/schema-creation/enum-types.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Scalar Types",permalink:"/docs/schema-creation/scalar-types"},next:{title:"Input Types",permalink:"/docs/schema-creation/input-types"}},i={},d=[];function p(e){const n={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"enum-types",children:"Enum Types"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://graphql.org/learn/schema/#enumeration-types",children:"Enum types"})," are just like you'd expect. It let's API consumers know that a field can be only 1 of a set of values."]}),"\n",(0,s.jsxs)(n.p,{children:["With our ",(0,s.jsx)(n.code,{children:"Person"})," example we could add a ",(0,s.jsx)(n.code,{children:"Gender"})," enum."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:'[JsonConverter(typeof(StringEnumConverter))]\npublic enum Gender {\n    Female,\n    Male,\n    NotSpecified\n}\n\n// building our schema\nschema.AddEnum<Gender>("Gender", "A persons Gender");\n'})}),"\n",(0,s.jsx)(n.p,{children:"The GraphQL schema produced from this helps document and describe the data model to API users. Example GraphQL schema below"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"enum Gender {\n  Female\n  Male\n  NotSpecified\n}\n\ntype Person {\n  firstName: String\n  lastName: String\n  gender: Gender\n}\n"})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var s=t(6540);const r={},a=s.createContext(r);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);