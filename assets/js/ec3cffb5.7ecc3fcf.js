"use strict";(self.webpackChunkentity_graphql_docs=self.webpackChunkentity_graphql_docs||[]).push([[5586],{1527:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"serialization-naming/newtonsoft-json","title":"Using NewtonSoft JSON","description":"To avoid version conflicts with Newtonsoft.Json, EntityGraphQL has no reference to it and hence doesn\'t know what to do if it hits a JToken or JObject.","source":"@site/docs/serialization-naming/newtonsoft-json.md","sourceDirName":"serialization-naming","slug":"/serialization-naming/newtonsoft-json","permalink":"/docs/serialization-naming/newtonsoft-json","draft":false,"unlisted":false,"editUrl":"https://github.com/EntityGraphQL/EntityGraphQL/tree/master/docs/docs/serialization-naming/newtonsoft-json.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Serialization & Field Naming","permalink":"/docs/serialization-naming/"},"next":{"title":"Authorization","permalink":"/docs/authorization"}}');var s=t(4848),i=t(8453);const r={},a="Using NewtonSoft JSON",c={},l=[];function d(e){const n={code:"code",em:"em",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"using-newtonsoft-json",children:"Using NewtonSoft JSON"})}),"\n",(0,s.jsxs)(n.p,{children:["To avoid version conflicts with Newtonsoft.Json, EntityGraphQL has no reference to it and hence doesn't know what to do if it hits a ",(0,s.jsx)(n.code,{children:"JToken"})," or ",(0,s.jsx)(n.code,{children:"JObject"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["If you are not using EntityGraphQL.AspNet and are trying to deserialize incoming JSON into the ",(0,s.jsx)(n.code,{children:"QueryRequest"})," and you have objects in the variables field Newtonsoft.Json will deserialize the incoming JSON objects into the variables dictionary as ",(0,s.jsx)(n.code,{children:"JObject"}),"/",(0,s.jsx)(n.code,{children:"JToken"})," types and EntityGraphQL doesn't know what to do with them when trying to mapping them to the field arguments."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:["Note many JSON libraries will convert sub objects/arrays/etc into their own custom types when dealing with a ",(0,s.jsx)(n.code,{children:"Dictionary<string, object>"}),". This can be used as an example to build other converters."]})}),"\n",(0,s.jsxs)(n.p,{children:["You can tell EntityGraphQL how to convert types when it is mapping incoming data classes/arguments using the ",(0,s.jsx)(n.code,{children:"AddCustomTypeConverter(new MyICustomTypeConverter())"})," on the schema provider."]}),"\n",(0,s.jsx)(n.p,{children:"Here is an example to use this to handle Newtonsoft.Json types:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:"internal class JObjectTypeConverter : ICustomTypeConverter\n{\n    public Type Type => typeof(JObject);\n\n    public object ChangeType(object value, Type toType, ISchemaProvider schema)\n    {\n        return ((JObject)value).ToObject(toType);\n    }\n}\n\ninternal class JTokenTypeConverter : ICustomTypeConverter\n{\n    public Type Type => typeof(JToken);\n\n    public object ChangeType(object value, Type toType, ISchemaProvider schema)\n    {\n        return ((JToken)value).ToObject(toType);\n    }\n}\n\ninternal class JValueTypeConverter : ICustomTypeConverter\n{\n    public Type Type => typeof(JValue);\n\n    public object ChangeType(object value, Type toType, ISchemaProvider schema)\n    {\n        return ((JValue)value).ToString();\n    }\n}\n\n// Where you build schema\n\nschema.AddCustomTypeConverter(new JObjectTypeConverter());\nschema.AddCustomTypeConverter(new JTokenTypeConverter());\nschema.AddCustomTypeConverter(new JValueTypeConverter());\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Now EntityGraphQL can convert ",(0,s.jsx)(n.code,{children:"JObject"}),", ",(0,s.jsx)(n.code,{children:"JToken"})," & ",(0,s.jsx)(n.code,{children:"JValue"})," types to classes/types using your version of Newtonsoft.Json. You can use ",(0,s.jsx)(n.code,{children:"ICustomTypeConverter"})," to handle any customer conversion."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var o=t(6540);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);