"use strict";(self.webpackChunkentity_graphql_docs=self.webpackChunkentity_graphql_docs||[]).push([[8147],{9868:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"schema-creation/input-types","title":"Input Types","description":"We\'ve seen passing scalar values, like enums, numbers or strings, as arguments into a field. Input types allow us to define complex types that can be used as an argument. This is particularly valuable in the case of mutations, where you might want to pass in a whole object to be created.","source":"@site/docs/schema-creation/input-types.md","sourceDirName":"schema-creation","slug":"/schema-creation/input-types","permalink":"/docs/schema-creation/input-types","draft":false,"unlisted":false,"editUrl":"https://github.com/EntityGraphQL/EntityGraphQL/tree/master/docs/docs/schema-creation/input-types.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Enum Types","permalink":"/docs/schema-creation/enum-types"},"next":{"title":"Interfaces Types & Implements Keyword","permalink":"/docs/schema-creation/interface-types"}}');var r=t(4848),a=t(8453);const i={sidebar_position:5},l="Input Types",p={},d=[{value:"Tracking Input Field Values",id:"tracking-input-field-values",level:2},{value:"Using ArgumentsTracker with Input Types",id:"using-argumentstracker-with-input-types",level:3},{value:"Using with Inline Arguments and Variables",id:"using-with-inline-arguments-and-variables",level:3},{value:"Nested Input Types",id:"nested-input-types",level:3}];function o(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"input-types",children:"Input Types"})}),"\n",(0,r.jsxs)(n.p,{children:["We've seen passing scalar values, like enums, numbers or strings, as arguments into a field. ",(0,r.jsx)(n.a,{href:"https://graphql.org/learn/schema/#input-types",children:"Input types"})," allow us to define complex types that can be used as an argument. This is particularly valuable in the case of mutations, where you might want to pass in a whole object to be created."]}),"\n",(0,r.jsx)(n.p,{children:"Input types differ to regular Object types largely because they can't have arguments on their fields. There are just a data object. As described in the spec:"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"The fields on an input object type can themselves refer to input object types, but you can't mix input and output types in your schema. Input object types also can't have arguments on their fields."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cs",children:'public class PeopleMutations\n{\n    [GraphQLMutation("Add a new person to the system")]\n    public Expression<Func<DemoContext, Person>> AddNewPerson(DemoContext db, AddPersonArgs args)\n    {\n        var person = new Person\n        {\n            FirstName = args.PersonInput.FirstName,\n            LastName = args.PersonInput.LastName,\n        };\n        db.People.Add(person);\n        db.SaveChanges();\n\n        return (ctx) => ctx.People.First(p => p.Id == person.Id);\n    }\n}\n\n[GraphQLArguments]\npublic class AddPersonArgs\n{\n    public PersonInput PersonInput { get; set; }\n}\n\npublic class PersonInput\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n}\n\n\n// creating our schema\nschema.AddInputType<PersonInput>("PersonInput", "New person data")\n    .AddAllFields();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You could of course use the ",(0,r.jsx)(n.code,{children:"Person"})," class from your data model directly and be selective about the fields you add to the GraphQL schema."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cs",children:'public class PeopleMutations\n{\n    [GraphQLMutation("Add a new person to the system")]\n    public Expression<Func<DemoContext, Person>> AddNewPerson(DemoContext db, AddPersonArgs args)\n    {\n        db.People.Add(args.PersonInput);\n        db.SaveChanges();\n        return (ctx) => ctx.People.First(p => p.Id == person.Id);\n    }\n}\n\n[GraphQLArguments]\npublic class AddPersonArgs\n{\n    public Person PersonInput { get; set; }\n}\n\n// creating our schema\nvar type = schema.AddInputType<Person>("PersonInput", "New person data")\ntype.AddField("firstName", p => p.FirstName, "First name);\ntype.AddField("lastName", p => p.LastName, "Last name);\n'})}),"\n",(0,r.jsx)(n.p,{children:"You can also use complex types in field arguments."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cs",children:'public class FilterInput\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n}\n\nschema.Query().AddField(\n    "people",\n    new {\n        filter = (FilterInput)null\n    },\n    (ctx, args) => ctx.People\n        .WhereWhen(p => p.FistName == args.filter.firstName, !string.IsNullOrEmpty(args.filter.firstName))\n        .WhereWhen(p => p.LastName == args.filter.lastName, !string.IsNullOrEmpty(args.filter.lastName)),\n    "List of people optionally filtered by a first and/or last name"\n);\n\nschema.AddInputType<FilterInput>("FilterInput", "Filter data for people")\n    .AddAllFields();\n'})}),"\n",(0,r.jsx)(n.p,{children:"The larger impact of these choices can be seen in the resulting schema and use of the API."}),"\n",(0,r.jsx)(n.p,{children:"With scalar arguments."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'POST localhost:5000/graphql\n    {\n    "query": "mutation AddPerson($firstName: String!, $lastName: String!) {\n        addNewPerson(firstName: $firstName, lastName: $lastName) { id }\n    }",\n    "variables": {\n        "firstName": "Bill",\n        "lastName": "Murray"\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"With an input type argument"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'POST localhost:5000/graphql\n{\n    "query": "mutation AddPerson($person: PersonInput!) {\n        addNewPerson(personInput: $person) { id }\n    }",\n    "variables": {\n        "personInput": {\n            "firstName": "Bill",\n            "lastName": "Murray"\n        }\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Input types can be modified using the ",(0,r.jsx)(n.a,{href:"../directives/schema-directives",children:"OneOf"})," Schema Directive to tell clients that only one field should contain a value."]}),"\n",(0,r.jsx)(n.h2,{id:"tracking-input-field-values",children:"Tracking Input Field Values"}),"\n",(0,r.jsxs)(n.p,{children:["EntityGraphQL provides ",(0,r.jsx)(n.code,{children:"IArgumentsTracker"}),' functionality to help you determine if an input field was explicitly provided by the user. This is especially useful for partial updates where you want to distinguish between "not provided" and "provided as null/default".']}),"\n",(0,r.jsx)(n.h3,{id:"using-argumentstracker-with-input-types",children:"Using ArgumentsTracker with Input Types"}),"\n",(0,r.jsxs)(n.p,{children:["Make your input type inherit from ",(0,r.jsx)(n.code,{children:"ArgumentsTracker"})," to track which fields were set:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class UpdatePersonInput : ArgumentsTracker\n{\n    public string? FirstName { get; set; }\n    public string? LastName { get; set; }\n    public string? Email { get; set; }\n    public int? Age { get; set; }\n}\n\n// Register as input type\nschema.AddInputType<UpdatePersonInput>("UpdatePersonInput", "Person update data")\n    .AddAllFields();\n\n// Use in mutation\n[GraphQLMutation("Update a person\'s information")]\npublic Expression<Func<DemoContext, Person>> UpdatePerson(DemoContext db, int id, UpdatePersonInput input)\n{\n    var person = db.People.Find(id);\n    \n    // Only update fields that were explicitly provided\n    if (input.IsSet(nameof(UpdatePersonInput.FirstName)))\n        person.FirstName = input.FirstName;\n        \n    if (input.IsSet(nameof(UpdatePersonInput.LastName)))\n        person.LastName = input.LastName;\n        \n    if (input.IsSet(nameof(UpdatePersonInput.Email)))\n        person.Email = input.Email; // Could be null if explicitly set to null\n        \n    if (input.IsSet(nameof(UpdatePersonInput.Age)))\n        person.Age = input.Age;\n    \n    db.SaveChanges();\n    return ctx => ctx.People.First(p => p.Id == id);\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"using-with-inline-arguments-and-variables",children:"Using with Inline Arguments and Variables"}),"\n",(0,r.jsx)(n.p,{children:"The tracking works consistently with both approaches:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-graphql",children:'# Using variables - only firstName and email are updated\nmutation UpdatePersonVar($input: UpdatePersonInput!) {\n    updatePerson(id: 1, input: $input) { id firstName lastName email }\n}\n# Variables: { "input": { "firstName": "John", "email": null } }\n\n# Using inline arguments - only firstName and email are updated  \nmutation {\n    updatePerson(id: 1, input: { firstName: "John", email: null }) {\n        id firstName lastName email\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"In both cases:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'input.IsSet("FirstName")'})," returns ",(0,r.jsx)(n.code,{children:"true"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'input.IsSet("Email")'})," returns ",(0,r.jsx)(n.code,{children:"true"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'input.IsSet("LastName")'})," returns ",(0,r.jsx)(n.code,{children:"false"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'input.IsSet("Age")'})," returns ",(0,r.jsx)(n.code,{children:"false"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"nested-input-types",children:"Nested Input Types"}),"\n",(0,r.jsx)(n.p,{children:"Tracking also works with nested input types:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class PersonAddressInput : ArgumentsTracker\n{\n    public string? Street { get; set; }\n    public string? City { get; set; }\n    public string? PostalCode { get; set; }\n}\n\npublic class UpdatePersonWithAddressInput : ArgumentsTracker\n{\n    public string? FirstName { get; set; }\n    public PersonAddressInput? Address { get; set; }\n}\n\n// Usage in mutation\nif (input.IsSet(nameof(UpdatePersonWithAddressInput.Address)) && input.Address != null)\n{\n    if (input.Address.IsSet(nameof(PersonAddressInput.Street)))\n        person.Address.Street = input.Address.Street;\n        \n    if (input.Address.IsSet(nameof(PersonAddressInput.City)))\n        person.Address.City = input.Address.City;\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-graphql",children:'mutation {\n    updatePersonWithAddress(id: 1, input: {\n        firstName: "John",\n        address: {\n            city: "New York"\n        }\n    }) {\n        id firstName address { street city postalCode }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"This allows for very granular control over which nested fields are updated."})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var s=t(6540);const r={},a=s.createContext(r);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);