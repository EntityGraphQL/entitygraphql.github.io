"use strict";(self.webpackChunkentity_graphql_docs=self.webpackChunkentity_graphql_docs||[]).push([[4167],{4600:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var s=t(5893),r=t(1151);const a={sidebar_position:7},i="Union Types",o={id:"schema-creation/union-types",title:"Union Types",description:"Union Types are very similar to interfaces, but they don't get to specify any common fields between the types.",source:"@site/docs/schema-creation/union-types.md",sourceDirName:"schema-creation",slug:"/schema-creation/union-types",permalink:"/docs/schema-creation/union-types",draft:!1,unlisted:!1,editUrl:"https://github.com/EntityGraphQL/EntityGraphQL/tree/master/docs/docs/schema-creation/union-types.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Interfaces Types & Implements Keyword",permalink:"/docs/schema-creation/interface-types"},next:{title:"Lists and Non-Null",permalink:"/docs/schema-creation/lists-and-nonnulls"}},c={},d=[];function p(e){const n={a:"a",code:"code",h1:"h1",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"union-types",children:"Union Types"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://graphql.org/learn/schema/#union-types",children:"Union Types"})," are very similar to interfaces, but they don't get to specify any common fields between the types."]}),"\n",(0,s.jsx)(n.p,{children:"Any abstract class or interface automatically added by the SchemaBuilder that contains no properties is added as a union instead of an interface (interfaces require at least one field)."}),"\n",(0,s.jsxs)(n.p,{children:["You can register union types manually using the ",(0,s.jsx)(n.code,{children:"AddUnion"})," method on SchemaProvider, then register potential types on the union type using the ",(0,s.jsx)(n.code,{children:"SchemaField.AddPossibleType"})," method. This differs from interfaces in that you register the child classes on the parent instead of the parent on the children."]}),"\n",(0,s.jsx)(n.p,{children:"As C# does not support anything like union types they are implemented used blank 'marker interfaces'"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:'public interface ICharacter { }\npublic class Human : ICharacter {\n    ...\n}\npublic class Droid : ICharacter {\n    ...\n}\n// creating our schema\nvar union = schema.AddUnion<ICharacter>(name: "Character", description: "represents any character in the Star Wars trilogy");\n\nschema.Type<ICharacter>().AddPossibleType<Human>();\nschema.Type<ICharacter>().AddPossibleType<Droid>();\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>i});var s=t(7294);const r={},a=s.createContext(r);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);