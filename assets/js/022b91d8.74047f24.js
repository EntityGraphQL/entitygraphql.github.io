"use strict";(self.webpackChunkentity_graphql_docs=self.webpackChunkentity_graphql_docs||[]).push([[480],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),m=s(n),u=a,h=m["".concat(l,".").concat(u)]||m[u]||c[u]||i;return n?r.createElement(h,o(o({ref:t},d),{},{components:n})):r.createElement(h,o({ref:t},d))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9699:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:11},o="Upgrading from 4.x to 5.x",p={unversionedId:"upgrade-5-0",id:"upgrade-5-0",title:"Upgrading from 4.x to 5.x",description:"EntityGraphQL respects Semantic Versioning, meaning version 5.0.0 contains breaking changes. Below highlights those changes and the impact to those coming from version 3.x.",source:"@site/docs/upgrade-5-0.md",sourceDirName:".",slug:"/upgrade-5-0",permalink:"/docs/upgrade-5-0",draft:!1,editUrl:"https://github.com/EntityGraphQL/EntityGraphQL/tree/master/docs/docs/upgrade-5-0.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"Reusing Linq Expressions",permalink:"/docs/library-compatibility/expression-reuse"},next:{title:"Upgrading from 3.x to 4.x",permalink:"/docs/upgrade-4-0"}},l={},s=[{value:"<code>SchemaProvider.ExecuteRequest</code> change",id:"schemaproviderexecuterequest-change",level:2},{value:"Changes to Method Argument Reflection",id:"changes-to-method-argument-reflection",level:2},{value:"<code>IExposableException</code> removed",id:"iexposableexception-removed",level:2},{value:"<code>IDirectiveProcessor</code> updated",id:"idirectiveprocessor-updated",level:2},{value:"<code>SchemaBuilderMethodOptions</code> removed",id:"schemabuildermethodoptions-removed",level:2},{value:"Register <code>GraphQLValidator</code>",id:"register-graphqlvalidator",level:2}],d={toc:s};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"upgrading-from-4x-to-5x"},"Upgrading from 4.x to 5.x"),(0,a.kt)("p",null,"EntityGraphQL respects ",(0,a.kt)("a",{parentName:"p",href:"https://semver.org/"},"Semantic Versioning"),", meaning version 5.0.0 contains breaking changes. Below highlights those changes and the impact to those coming from version 3.x."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"You can see the full changelog which includes other changes and bug fixes as well as links back to GitHub issues/MRs with more information ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/EntityGraphQL/EntityGraphQL/blob/master/CHANGELOG.md"},"here on GitHub"),".")),(0,a.kt)("h2",{id:"schemaproviderexecuterequest-change"},(0,a.kt)("inlineCode",{parentName:"h2"},"SchemaProvider.ExecuteRequest")," change"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"SchemaProvider.ExecuteRequest")," & ",(0,a.kt)("inlineCode",{parentName:"p"},"SchemaProvider.ExecuteRequestAsync")," no longer take an instance of the schema context. The context will be fetched from the provided ",(0,a.kt)("inlineCode",{parentName:"p"},"ServiceProvider")," meaning the lifetime rules are adhered to - e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"ServiceLifetime.Transient")," is now correctly used. This is the perferred way to execute a query."),(0,a.kt)("p",null,"If you wish to maintain the 4.x execution you can use",(0,a.kt)("inlineCode",{parentName:"p"},"ExecuteRequestWithContext")," & ",(0,a.kt)("inlineCode",{parentName:"p"},"ExecuteRequestWithContextAsync")," which operate in the same way as 4.x - the instance of the schema context passed in will be used for all references to that type."),(0,a.kt)("h2",{id:"changes-to-method-argument-reflection"},"Changes to Method Argument Reflection"),(0,a.kt)("p",null,"Previously if ",(0,a.kt)("inlineCode",{parentName:"p"},"AutoCreateInputTypes")," was enabled we didn't know if a parameter should be a GraphQL argument or an injected service unless you used ",(0,a.kt)("inlineCode",{parentName:"p"},"[GraphQLArguments]"),". But this meant you couldn't have complex types as parameters in the method and have them reflected in the schema (",(0,a.kt)("inlineCode",{parentName:"p"},"[GraphQLArguments]")," flattens the properties in the schema as arguments). This has been refactored to be predictable."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"AutoCreateInputTypes")," now defaults to ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," and you will have to add some attributes to your parameters or classes."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"[GraphQLInputType]")," will include the parameter as an argument and use the type as an input type. ",(0,a.kt)("inlineCode",{parentName:"p"},"[GraphQLArguments]")," will flatten the properties of that parameter type into many arguments in the schema."),(0,a.kt)("p",null,"When looking for a methods parameters, EntityGraphQL will"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"First all scalar / non-complex types will be added as arguments in the schema.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"If parameter type or enum type is already in the schema it will be added at an argument.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Any argument or type with ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLInputTypeAttribute")," will be added to the schema as an ",(0,a.kt)("inlineCode",{parentName:"p"},"InputType"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Any argument or type with ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLArgumentsAttribute")," found will have the types properties added as schema arguments.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"If no attributes are found it will assume they are services and not add them to the schema. ",(0,a.kt)("em",{parentName:"p"},"I.e. Label your arguments with the attributes or add them to the schema beforehand.")))),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"AutoCreateInputTypes")," now only controls if the type of the argument should be added to the schema."),(0,a.kt)("h2",{id:"iexposableexception-removed"},(0,a.kt)("inlineCode",{parentName:"h2"},"IExposableException")," removed"),(0,a.kt)("p",null,"Interface ",(0,a.kt)("inlineCode",{parentName:"p"},"IExposableException")," has been removed. Use the existing ",(0,a.kt)("inlineCode",{parentName:"p"},"SchemaBuilderSchemaOptions.AllowedExceptions")," property to define which exceptions are rendered into the results. Or mark your exceptions with the ",(0,a.kt)("inlineCode",{parentName:"p"},"AllowedExceptionAttribute")," to have exception details in the results when ",(0,a.kt)("inlineCode",{parentName:"p"},"SchemaBuilderSchemaOptions.IsDevelopment")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,a.kt)("h2",{id:"idirectiveprocessor-updated"},(0,a.kt)("inlineCode",{parentName:"h2"},"IDirectiveProcessor")," updated"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"IDirectiveProcessor.On")," renamed to ",(0,a.kt)("inlineCode",{parentName:"li"},"IDirectiveProcessor.Location")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"IDirectiveProcessor.ProcessField()")," removed, use ",(0,a.kt)("inlineCode",{parentName:"li"},"IDirectiveProcessor.VisitNode")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"IDirectiveProcessor.ProcessExpression()")," Has been removed. You can build a new ",(0,a.kt)("inlineCode",{parentName:"li"},"IGraphQLNode")," in ",(0,a.kt)("inlineCode",{parentName:"li"},"VisitNode")," to make changes to the graph")),(0,a.kt)("h2",{id:"schemabuildermethodoptions-removed"},(0,a.kt)("inlineCode",{parentName:"h2"},"SchemaBuilderMethodOptions")," removed"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"AutoCreateInputTypes")," has been moved to ",(0,a.kt)("inlineCode",{parentName:"li"},"SchemaBuilderOptions")," and is now defaulted to ",(0,a.kt)("inlineCode",{parentName:"li"},"true"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"AddNonAttributedMethods")," has been move to ",(0,a.kt)("inlineCode",{parentName:"li"},"SchemaBuilderOptions.AddNonAttributedMethodsInControllers"))),(0,a.kt)("h2",{id:"register-graphqlvalidator"},"Register ",(0,a.kt)("inlineCode",{parentName:"h2"},"GraphQLValidator")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLValidator")," is no longer magically added to your method fields (mutations/subscriptions). If you wish to use it please register it in your services. There is a new helper method in EntityGraphQL.AspNet ",(0,a.kt)("inlineCode",{parentName:"p"},"AddGraphQLValidator()"),". This means you can implement and register your own implementation."))}c.isMDXComponent=!0}}]);