"use strict";(self.webpackChunkentity_graphql_docs=self.webpackChunkentity_graphql_docs||[]).push([[561],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>h});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(r),d=o,h=u["".concat(l,".").concat(d)]||u[d]||m[d]||i;return r?n.createElement(h,a(a({ref:t},c),{},{components:r})):n.createElement(h,a({ref:t},c))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1242:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=r(7462),o=(r(7294),r(3905));const i={},a="Reusing Linq Expressions",s={unversionedId:"library-compatibility/expression-reuse",id:"library-compatibility/expression-reuse",title:"Reusing Linq Expressions",description:"Computed properties don't work with most Linq providers out of the box. Dave Glick has a great related post on Computed Proprties and EntityFramework.",source:"@site/docs/library-compatibility/expression-reuse.md",sourceDirName:"library-compatibility",slug:"/library-compatibility/expression-reuse",permalink:"/docs/library-compatibility/expression-reuse",draft:!1,editUrl:"https://github.com/EntityGraphQL/EntityGraphQL/tree/master/docs/docs/library-compatibility/expression-reuse.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Optimizing Expressions",permalink:"/docs/library-compatibility/expression-optimizers"},next:{title:"Upgrading from 4.x to 5.x",permalink:"/docs/upgrade-5-0"}},l={},p=[],c={toc:p},u="wrapper";function m(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"reusing-linq-expressions"},"Reusing Linq Expressions"),(0,o.kt)("p",null,"Computed properties don't work with most Linq providers out of the box. Dave Glick has a great related post on ",(0,o.kt)("a",{parentName:"p",href:"https://www.daveaglick.com/posts/computed-properties-and-entity-framework"},"Computed Proprties and EntityFramework"),"."),(0,o.kt)("p",null,"Here's a list of various libraries that can help"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koenbeuk/EntityFrameworkCore.Projectables"},"EntityFrameworkCore.Projectables")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://nein.tech/nein-linq/"},"Nein Linq")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/ClaveConsulting/Expressionify"},"Expressionify")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/scottksmith95/LINQKit"},"LinqKit")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/hazzik/DelegateDecompiler"},"Delegate Decompiler"))),(0,o.kt)("p",null,"Most the these libraries work in a similar ways - examples below are using the syntax from ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/koenbeuk/EntityFrameworkCore.Projectables"},"EntityFrameworkCore.Projectables"),"."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Either globally register the library when registering the context")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},'services.AddDbContext<DemoContext>(opt =>\n  opt.UseSqlite("Filename=demo.db")\n  // highlight-next-line\n    .UseProjectables()\n);\n')),(0,o.kt)("p",null,"or enable it per expression."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"dbContext.People\n// highlight-next-line\n  .ExpandProjectables()\n  .Select(x => x.Age())\n")),(0,o.kt)("p",null,"If you go down the route of registering it per query then you'll need to override the resolve method on the relevant fields on the EQL Schema."),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Add an expression bodied function to the entityclass or helper class (generally be static or instance) and mark it using an attribute.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"[Projectable]\n[GraphQLField]\npublic static int Age(this Person person) => (int)((DateTime.Now - person.Dob).TotalDays / 365);\n")),(0,o.kt)("p",null,"Some libraries will automatically convert this to an expression property using Source Generators (EFC.Projectables, Expressionfy) or reflection/decompilation (Delegate Decompiler), yet others require you to provide both the method and expression yourself (Nein Linq)."),(0,o.kt)("p",null,"This field is now available to queries (exposed via the ",(0,o.kt)("inlineCode",{parentName:"p"},"[GraphQLField]")," attribute). ",(0,o.kt)("inlineCode",{parentName:"p"},"Projectable"),"s provide reuse of common expression that can also be used outside on EntityGraphQL or in your mutations as well."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},'public class PeopleMutations\n{\n    [GraphQLMutation("Add a new person to the system")]\n    public Expression<Func<DemoContext, Person>> UpdatePerson(DemoContext db, int id, string firstName, string lastName)\n    {\n        var person = db.People.Select(p => {\n            p.FirstName,\n            p.LastName,\n// highlight-next-line\n            p.Age()\n        });\n\n        ...\n    }\n}\n')))}m.isMDXComponent=!0}}]);