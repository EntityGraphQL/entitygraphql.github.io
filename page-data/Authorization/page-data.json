{"componentChunkName":"component---src-templates-docs-js","path":"/authorization","result":{"data":{"site":{"siteMetadata":{"title":"Entity GraphQL Docs","docsLocation":"https://github.com/lukemurray/EntityGraphQL/tree/master/docs/content"}},"mdx":{"fields":{"id":"40400e4d-fcc9-5693-b0ec-dd89b9728bb3","title":"Authorization","slug":"/authorization"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Authorization\",\n  \"metaTitle\": \"Adding authorization to your schema - EntityGraphQL\",\n  \"metaDescription\": \"Adding authorization to your GraphQL schema\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"You should secure the route where you app/client posts request to in any ASP.NET supports. Given GraphQL works with a schema you likely want to provide authorization within the schema. EntityGraphQL provides support for checking claims on a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ClaimsPrincipal\"), \" object.\"), mdx(\"h1\", null, \"Passing in the User\"), mdx(\"p\", null, \"First pass in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ClaimsPrincipal\"), \" to the query call\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note if you are using the \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"AddGraphQLSchema()\"), \" extension in \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"EntityGraphQL.AspNet\"), \" this is already handled for you.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"// Assuming you're in a ASP.NET controller\\n// this.User is the current ClaimsPrincipal\\nvar results = schemaProvider.ExecuteRequest(query, dbContext, this.HttpContext.RequestServices, this.User);\\n\")), mdx(\"h1\", null, \"Adding Authorization on Roles or Policies\"), mdx(\"p\", null, \"You can add authorization requirements throughout your schema even using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AuthorizeAttribute\"), \" or when building/modifying your schema.\"), mdx(\"p\", null, \"_Note: if you provide multiple \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[AuthorizeAttribute]\"), \" attributes on a single field/mutation they are treated as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AND\"), \" meaning all are required. If you provide a single \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[AuthorizeAttribute]\"), \" attribute with multiple roles/policies in a comma-separated string they are treated as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OR\"), \" i.e. having any of those listed will authorize access.\"), mdx(\"h1\", null, \"Mutations\"), mdx(\"p\", null, \"Mark you mutation methods with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[Authorize(Roles = \\\"role-name\\\")]\"), \" attribute.\"), mdx(\"p\", null, \"Policy authorization with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[Authorize(Policy = \\\"policy-name\\\")]\"), \" is also supported when using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"EntityGraphQL.AspNet\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"public class MovieMutations\\n{\\n  [GraphQLMutation]\\n  [Authorize(Roles = \\\"movie-editor\\\")]\\n  public Movie AddActor(MyDbContext db, ActorArgs args)\\n  {\\n    // ...\\n  }\\n}\\n\")), mdx(\"p\", null, \"If a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ClaimsPrincipal\"), \" is provided with the query call it will be required to be Authorized and have a Role of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"movie-editor\"), \" to call this mutation.\"), mdx(\"h1\", null, \"Queries\"), mdx(\"p\", null, \"If you are using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SchemaBuilder.FromObject<TContext>()\"), \" you can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[Authorize(Roles = \\\"role-name\\\")]\"), \" attribute again throughout the objects.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"public class MyDbContext : DbContext {\\n  protected override void OnModelCreating(ModelBuilder builder) {\\n    // Set up your relations\\n  }\\n\\n  // require either claim\\n  [Authorize(Roles = \\\"property-role,admin-property-role\\\")]\\n  public DbSet<Property> Properties { get; set; }\\n  public DbSet<PropertyType> PropertyTypes { get; set; }\\n  public DbSet<Location> Locations { get; set; }\\n}\\n\\npublic class Property {\\n  public uint Id { get; set; }\\n  public string Name { get; set; }\\n  public PropertyType Type { get; set; }\\n  // require both claims\\n  [Authorize(Roles = \\\"property-admin\\\")]\\n  [Authorize(Roles = \\\"super-admin\\\")]\\n  public Location Location { get; set; }\\n}\\n\\n// ....\\n\")), mdx(\"p\", null, \"You can secure whole types with the attribute too.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"[Authorize(Roles = \\\"property-user\\\")]\\npublic class Property {\\n  public uint Id { get; set; }\\n  public string Name { get; set; }\\n  public PropertyType Type { get; set; }\\n  public Location Location { get; set; }\\n}\\n\")), mdx(\"p\", null, \"If a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ClaimsPrincipal\"), \" is provided with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ExecuteRequest\"), \" call it will be required to be Authorized and have the Role \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"property-role\"), \" to query the root-level \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"properties\"), \" field and the role \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"property-admin\"), \" to query the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Property\"), \" field \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"location\"), \".\"), mdx(\"p\", null, \"Authorization can be provided in the API for add/replacing fields on the schema objact.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"schemaProvider.AddField(\\\"myField\\\", (db) => db.MyEntities, \\\"Description\\\").RequiresAllRoles(\\\"admin\\\");\\nschemaProvider.AddField(\\\"myField\\\", (db) => db.MyEntities, \\\"Description\\\").RequiresAnyRole(\\\"admin\\\", \\\"super-admin\\\");\\n\\nschemaProvider.AddType<Property>(\\\"properties\\\", (db) => db.Properties, \\\"Description\\\").RequiresAllRoles(\\\"property-user\\\");\\nschemaProvider.AddType<Property>(\\\"properties\\\", (db) => db.Properties, \\\"Description\\\").RequiresAnyRole(\\\"property-user\\\", \\\"property-admin\\\");\\n\")), mdx(\"p\", null, \"Note when using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AddField()\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AddType()\"), \" these functions will automatically search for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[Authorize()]\"), \" attributes on the fields and types.\"), mdx(\"h1\", null, \"Authorization without ASP.Net\"), mdx(\"p\", null, \"You can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GraphQLAuthorizeAttribute\"), \" with role claims to provide authorization without the ASP.Net dependency. \"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#passing-in-the-user","title":"Passing in the User"},{"url":"#adding-authorization-on-roles-or-policies","title":"Adding Authorization on Roles or Policies"},{"url":"#mutations","title":"Mutations"},{"url":"#queries","title":"Queries"},{"url":"#authorization-without-aspnet","title":"Authorization without ASP.Net"}]},"parent":{"relativePath":"authorization.md"},"frontmatter":{"metaTitle":"Adding authorization to your schema - EntityGraphQL","metaDescription":"Adding authorization to your GraphQL schema"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/field-extensions","title":"Field Extensions"}}},{"node":{"fields":{"slug":"/authorization","title":"Authorization"}}},{"node":{"fields":{"slug":"/getting-started","title":"Getting Started"}}},{"node":{"fields":{"slug":"/integration","title":"Tool Integration"}}},{"node":{"fields":{"slug":"/","title":"Entity GraphQL"}}},{"node":{"fields":{"slug":"/entity-framework","title":"Entity Framework"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/serialization-naming/newtonsoft-json","title":"Using Newtonsoft.Json"}}},{"node":{"fields":{"slug":"/serialization-naming","title":"Serialization & Field Naming"}}},{"node":{"fields":{"slug":"/schema-creation/01-mutations","title":"Mutations"}}},{"node":{"fields":{"slug":"/validation","title":"Validation"}}},{"node":{"fields":{"slug":"/schema-creation/03-types","title":"Other Types"}}},{"node":{"fields":{"slug":"/schema-creation/04-directives","title":"Directives"}}},{"node":{"fields":{"slug":"/schema-creation/02-fields","title":"Field Arguments"}}},{"node":{"fields":{"slug":"/schema-creation","title":"Schema Creation"}}},{"node":{"fields":{"slug":"/field-extensions/01-paging","title":"Paging"}}},{"node":{"fields":{"slug":"/schema-creation/05-other-data-sources","title":"Other Data Sources"}}},{"node":{"fields":{"slug":"/field-extensions/02-filtering","title":"Filtering"}}},{"node":{"fields":{"slug":"/field-extensions/03-sorting","title":"Sorting"}}},{"node":{"fields":{"slug":"/field-extensions/04-custom-extensions","title":"Custom Extensions"}}}]}},"pageContext":{"id":"40400e4d-fcc9-5693-b0ec-dd89b9728bb3"}},"staticQueryHashes":["2619113677","3706406642","417421954"]}