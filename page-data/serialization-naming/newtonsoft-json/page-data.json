{"componentChunkName":"component---src-templates-docs-js","path":"/serialization-naming/newtonsoft-json","result":{"data":{"site":{"siteMetadata":{"title":"Entity GraphQL Docs","docsLocation":"https://github.com/lukemurray/EntityGraphQL/tree/master/docs/content"}},"mdx":{"fields":{"id":"3a0520b7-6f47-5acd-be78-fbcedfc3040e","title":"Using Newtonsoft.Json","slug":"/serialization-naming/newtonsoft-json"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Using Newtonsoft.Json\",\n  \"metaTitle\": \"Using Newtonsoft.Json - EntityGraphQL\",\n  \"metaDescription\": \"Deserialing incoming requests with Newtonsoft.Json\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"To avoid version conflicts with Newtonsoft.Json, EntityGraphQL has no reference to it and hence doesn't know what to do if it hits a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Jtoken\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JObject\"), \".\"), mdx(\"p\", null, \"If you are not using EntityGraphQL.AspNet and are trying to deserialize incoming JSON into the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"QueryRequest\"), \" and you have objects in the variables field Newtonsoft.Json will deserialize the incoming JSON objects into the variables dictionary as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JObject\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JToken\"), \" types and EntityGraphQL doesn't know what to do with them when trying to mapping them to the field arguments.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note many JSON libraries will convert sub objects/arrays/etc into their own custom types when dealing with a \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"Dictionary<string, object>\"), \". This can be used as an example to build other converters.\")), mdx(\"p\", null, \"You can tell EntityGraphQL how to convert types when it is mapping incoming data classes/arguments using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AddCustomTypeConverter(new MyICustomTypeConverter())\"), \" on the schema provider.\"), mdx(\"p\", null, \"Here is an example to use this to handle Newtonsoft.Json types:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"internal class JObjectTypeConverter : ICustomTypeConverter\\n{\\n    public Type Type => typeof(JObject);\\n\\n    public object ChangeType(object value, Type toType, ISchemaProvider schema)\\n    {\\n        return ((JObject)value).ToObject(toType);\\n    }\\n}\\n\\ninternal class JTokenTypeConverter : ICustomTypeConverter\\n{\\n    public Type Type => typeof(JToken);\\n\\n    public object ChangeType(object value, Type toType, ISchemaProvider schema)\\n    {\\n        return ((JToken)value).ToObject(toType);\\n    }\\n}\\n\\ninternal class JValueTypeConverter : ICustomTypeConverter\\n{\\n    public Type Type => typeof(JValue);\\n\\n    public object ChangeType(object value, Type toType, ISchemaProvider schema)\\n    {\\n        return ((JValue)value).ToString();\\n    }\\n}\\n\\n// Where you build schema\\n\\nschema.AddCustomTypeConverter(new JObjectTypeConverter());\\nschema.AddCustomTypeConverter(new JTokenTypeConverter());\\nschema.AddCustomTypeConverter(new JValueTypeConverter());\\n\")), mdx(\"p\", null, \"Now EntityGraphQL can convert \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JObject\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JToken\"), \" & \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JValue\"), \" types to classes/types using your version of Newtonsoft.Json. You can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ICustomTypeConverter\"), \" to handle any customer conversion.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{},"parent":{"relativePath":"serialization-naming/newtonsoft-json.md"},"frontmatter":{"metaTitle":"Using Newtonsoft.Json - EntityGraphQL","metaDescription":"Deserialing incoming requests with Newtonsoft.Json"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/authorization","title":"Authorization"}}},{"node":{"fields":{"slug":"/entity-framework","title":"Entity Framework"}}},{"node":{"fields":{"slug":"/integration","title":"Tool Integration"}}},{"node":{"fields":{"slug":"/getting-started","title":"Getting Started"}}},{"node":{"fields":{"slug":"/field-extensions","title":"Field Extensions"}}},{"node":{"fields":{"slug":"/","title":"Entity GraphQL"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/schema-creation","title":"Schema Creation"}}},{"node":{"fields":{"slug":"/serialization-naming","title":"Serialization & Field Naming"}}},{"node":{"fields":{"slug":"/validation","title":"Validation"}}},{"node":{"fields":{"slug":"/serialization-naming/newtonsoft-json","title":"Using Newtonsoft.Json"}}},{"node":{"fields":{"slug":"/schema-creation/01-mutations","title":"Mutations"}}},{"node":{"fields":{"slug":"/schema-creation/02-fields","title":"Field Arguments"}}},{"node":{"fields":{"slug":"/schema-creation/04-directives","title":"Directives"}}},{"node":{"fields":{"slug":"/schema-creation/05-other-data-sources","title":"Other Data Sources"}}},{"node":{"fields":{"slug":"/schema-creation/03-types","title":"Other Types"}}},{"node":{"fields":{"slug":"/field-extensions/01-paging","title":"Paging"}}},{"node":{"fields":{"slug":"/field-extensions/02-filtering","title":"Filtering"}}},{"node":{"fields":{"slug":"/field-extensions/04-custom-extensions","title":"Custom Extensions"}}},{"node":{"fields":{"slug":"/field-extensions/03-sorting","title":"Sorting"}}}]}},"pageContext":{"id":"3a0520b7-6f47-5acd-be78-fbcedfc3040e"}},"staticQueryHashes":["2619113677","3706406642","417421954"]}