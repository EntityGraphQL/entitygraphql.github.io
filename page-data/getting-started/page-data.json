{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/getting-started",
    "result": {"data":{"site":{"siteMetadata":{"title":"Entity GraphQL Docs","docsLocation":"https://github.com/lukemurray/EntityGraphQL/tree/master/docs/content"}},"mdx":{"fields":{"id":"492da216-1cf9-508a-a624-789ceec2a4eb","title":"Getting Started","slug":"/getting-started"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Getting Started\",\n  \"metaTitle\": \"Getting started - EntityGraphQL\",\n  \"metaDescription\": \"Get up and running with EntityGraphQL\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Installation\"), mdx(\"p\", null, \"If you are working with ASP.NET then install \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.nuget.org/packages/EntityGraphQL.AspNet\"\n  }, \"EntityGraphQL.AspNet\"), \" via Nuget.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Quickly get started with ASP.NET\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Integrate with ASP.NET policy authorization\")), mdx(\"p\", null, \"You can install the core \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.nuget.org/packages/EntityGraphQL\"\n  }, \"EntityGraphQL\"), \" package if you do not need ASP.NET.\"), mdx(\"h1\", null, \"Create a data model\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: There is no dependency on Entity Framework. Queries are compiled to \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"IQueryable\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"IEnumberable\"), \" LINQ expressions. EF is not a requirement - any ORM working with \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"LinqProvider\"), \" or an in-memory object will work - this example uses EF.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"public class DemoContext : DbContext\\n{\\n    public DbSet<Movie> Movies { get; set; }\\n    public DbSet<Person> People { get; set; }\\n    public DbSet<Actor> Actors { get; set; }\\n}\\n\\npublic class Movie\\n{\\n    public uint Id { get; set; }\\n    public string Name { get; set; }\\n    public Genre Genre { get; set; }\\n    public DateTime Released { get; set; }\\n    public List<Actor> Actors { get; set; }\\n    public List<Writer> Writers { get; set; }\\n    public Person Director { get; set; }\\n    public uint? DirectorId { get; set; }\\n    public double Rating { get; internal set; }\\n}\\n\\npublic class Actor\\n{\\n    public uint PersonId { get; set; }\\n    public Person Person { get; set; }\\n    public uint MovieId { get; set; }\\n    public Movie Movie { get; set; }\\n}\\npublic class Writer\\n{\\n    public uint PersonId { get; set; }\\n    public Person Person { get; set; }\\n    public uint MovieId { get; set; }\\n    public Movie Movie { get; set; }\\n}\\n\\npublic enum Genre\\n{\\n    Action,\\n    Drama,\\n    Comedy,\\n    Horror,\\n    Scifi,\\n}\\n\\npublic class Person\\n{\\n    public uint Id { get; set; }\\n    public string FirstName { get; set; }\\n    public string LastName { get; set; }\\n    public DateTime Dob { get; set; }\\n    public List<Actor> ActorIn { get; set; }\\n    public List<Writer> WriterOf { get; set; }\\n    public List<Movie> DirectorOf { get; set; }\\n    public DateTime? Died { get; set; }\\n    public bool IsDeleted { get; set; }\\n}\\n\")), mdx(\"h1\", null, \"Create the API\"), mdx(\"p\", null, \"Using what ever .NET API library you wish you can receive a query, execute it and return the data. Here is an example with ASP.NET.\"), mdx(\"p\", null, \"You will need to install \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.nuget.org/packages/EntityGraphQL.AspNet\"\n  }, \"EntityGraphQL.AspNet\"), \" to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MapGraphQL<>()\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AddGraphQLSchema()\"), \". You can also build your own endpoint, see below.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.nuget.org/packages/EntityGraphQL.AspNet\"\n  }, mdx(\"img\", {\n    parentName: \"a\",\n    \"src\": \"https://img.shields.io/nuget/dt/EntityGraphQL.AspNet\",\n    \"alt\": \"Nuget\"\n  }))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"using EntityGraphQL.AspNet;\\n\\npublic class Startup {\\n  public void ConfigureServices(IServiceCollection services)\\n  {\\n      // Again, just an example using EF but you do not have to\\n      services.AddDbContext<DemoContext>(opt => opt.UseInMemoryDatabase(\\\"Demo\\\"));\\n      // This registers a SchemaProvider<DemoContext> and uses reflection to build the schema with default options\\n      services.AddGraphQLSchema<DemoContext>();\\n  }\\n\\n  public void Configure(IApplicationBuilder app, DemoContext db)\\n  {\\n      app.UseRouting();\\n      app.UseEndpoints(endpoints =>\\n      {\\n          // default to /graphql endpoint\\n          endpoints.MapGraphQL<DemoContext>();\\n      });\\n  }\\n}\\n\")), mdx(\"p\", null, \"This sets up a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HTTP\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"POST\"), \" end point at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/graphql\"), \" where the body of the post is expected to be a GraphQL query. You can change the path with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"path\"), \" argument in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MapGraphQL<T>()\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"You can authorize the route how ever you wish using ASP.NET. See the Authorization section for more details.\")), mdx(\"p\", null, \"You can also expose any endpoint over any protocol you'd like. We'll use HTTP/S for these examples.\"), mdx(\"h1\", null, \"Query your API\"), mdx(\"p\", null, \"You can now make a request to your API via any HTTP tool/library.\"), mdx(\"p\", null, \"For example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"  POST localhost:5000/graphql\\n  {\\n    \\\"query\\\": \\\"{\\n      movies { id name }\\n    }\\\",\\n    \\\"variables\\\": null\\n  }\\n\")), mdx(\"p\", null, \"Will return the following result (depending on the data in you DB).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"{\\n  \\\"data\\\": {\\n    \\\"movies\\\": [\\n      {\\n        \\\"id\\\": 11,\\n        \\\"name\\\": \\\"Inception\\\"\\n      },\\n      {\\n        \\\"id\\\": 12,\\n        \\\"name\\\": \\\"Star Wars: Episode IV - A New Hope\\\"\\n      }\\n    ]\\n  }\\n}\\n\")), mdx(\"p\", null, \"Maybe you only want a specific property \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"(request body only from now on)\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"  {\\n    movie(id: 11) {\\n      id name\\n    }\\n  }\\n\")), mdx(\"p\", null, \"Will return the following result.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"{\\n  \\\"data\\\": {\\n    \\\"movie\\\": {\\n      \\\"id\\\": 11,\\n      \\\"name\\\": \\\"Inception\\\"\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"If you need other fields or relations, just ask\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"  {\\n    movies {\\n      id\\n      name\\n      director {\\n        name\\n      }\\n      writers {\\n        name\\n      }\\n    }\\n  }\\n\")), mdx(\"p\", null, \"Will return the following result.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"{\\n  \\\"data\\\": {\\n    \\\"movies\\\": [\\n      {\\n        \\\"id\\\": 11,\\n        \\\"name\\\": \\\"Inception\\\",\\n        \\\"director\\\": {\\n          \\\"name\\\": \\\"Christopher Nolan\\\"\\n        },\\n        \\\"writers\\\": [{\\n          \\\"name\\\": \\\"Christopher Nolan\\\"\\n        }]\\n      },\\n      {\\n        \\\"id\\\": 12,\\n        \\\"name\\\": \\\"Star Wars: Episode IV - A New Hope\\\",\\n        \\\"director\\\": {\\n          \\\"name\\\": \\\"George Lucas\\\"\\n        },\\n        \\\"writers\\\": [{\\n          \\\"name\\\": \\\"George Lucas\\\"\\n        }]\\n      }\\n    ]\\n  }\\n}\\n\")), mdx(\"h1\", null, \"Custom Controller / Manual Execution\"), mdx(\"p\", null, \"You can execute GraphQL queries in your own controller or outside of ASP.NET. Below gives an example.\"), mdx(\"h2\", null, \"Build the GraphQL schema\"), mdx(\"p\", null, \"We can use the helper method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SchemaBuilder.FromObject<T>>()\"), \" to build the schema from the .NET object model we defined above.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"var schema = SchemaBuilder.FromObject<DemoContext>();\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"See the Schema Creation section to learn more about \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"SchemaBuilder.FromObject<T>>()\"))), mdx(\"h2\", null, \"Executing a Query\"), mdx(\"p\", null, \"Here is an example of a controller that receives a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"QueryRequest\"), \" and executes the query. This logic could easily be applied to other web frameworks.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"[Route(\\\"graphql\\\")]\\npublic class QueryController : Controller\\n{\\n    private readonly DemoContext _dbContext;\\n    private readonly SchemaProvider<DemoContext> _schemaProvider;\\n\\n    public QueryController(DemoContext dbContext, SchemaProvider<DemoContext> schemaProvider)\\n    {\\n        this._dbContext = dbContext;\\n        this._schemaProvider = schemaProvider;\\n    }\\n\\n    [HttpPost]\\n    public object Post([FromBody]QueryRequest query)\\n    {\\n        try\\n        {\\n            var results = _schemaProvider.ExecuteRequest(query, _dbContext, HttpContext.RequestServices, null);\\n            // gql compile errors show up in results.Errors\\n            return results;\\n        }\\n        catch (Exception)\\n        {\\n            return HttpStatusCode.InternalServerError;\\n        }\\n    }\\n}\\n\")), mdx(\"h2\", null, \"Configuring System.Text.Json\"), mdx(\"p\", null, \"If you use your own controller/method to execute GraphQL and use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"System.Text.Json\"), \", it is best to configure it like below for best compatiablity with other tools.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"services.AddControllers()\\n    .AddJsonOptions(opts =>\\n    {\\n        // Use enum field names instead of numbers\\n        opts.JsonSerializerOptions.Converters.Add(new JsonStringEnumConverter());\\n        // EntityGraphQL internally builds types with fields\\n        opts.JsonSerializerOptions.IncludeFields = true;\\n        // The fields internally built already are named with fieldNamer (defaults to camelCase). This is\\n        // for the properties on QueryResult (Data, Errors) to match what most tools etc expect (camelCase)\\n        opts.JsonSerializerOptions.PropertyNamingPolicy = JsonNamingPolicy.CamelCase;\\n    });\\n\")), mdx(\"h2\", null, \"Deserialization of QueryRequest & QueryVariables\"), mdx(\"p\", null, \"If you are using you're own controller/method to execute GraphQL and deserializing a graphql request like below into the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GraphQLRequest\"), \" object. You need to be aware of how your serializer handles nested \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dictionary<string, object>\"), \".\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Sample incoming json request\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"{\\n  \\\"query\\\": \\\"mutation Mutate($var: ComplexInputType){ doUpdate($var) }\\\",\\n  \\\"variables\\\": {\\n    \\\"var\\\": {\\n      \\\"name\\\": \\\"Lisa\\\",\\n      \\\"lastName\\\": \\\"Simpson\\\"\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"Many deserilaizers will deserialize this into the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"QueryRequest.Variables\"), \" object with the value of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"var\"), \" as a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JsonElement\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"System.Text.Json\"), \") or a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JObject\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Newtonsoft.Json\"), \"). e.g.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"var gql = JsonSerializer.Deserialize<QueryRequest>(query);\\nAssert.True(gql.Variables[\\\"var\\\"].GetType() == typeof(JsonElement));\\n\")), mdx(\"p\", null, \"What we want is a nested \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dictionary<string, object>\"), \". \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"EntityGraphQL\"), \" handles System.Text.Json's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JsonElement\"), \" itself. However if you are using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Newtonsoft.Json\"), \" or another library (that doesn't deserialize to nested dictionaries) you will have to provide a custom type converter.\"), mdx(\"p\", null, \"See the serialization tests for \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/EntityGraphQL/EntityGraphQL/blob/master/src/tests/EntityGraphQL.Tests/SerializationTests.cs\"\n  }, \"an example with Newtonsoft.Json\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#installation","title":"Installation"},{"url":"#create-a-data-model","title":"Create a data model"},{"url":"#create-the-api","title":"Create the API"},{"url":"#query-your-api","title":"Query your API"},{"url":"#custom-controller--manual-execution","title":"Custom Controller / Manual Execution","items":[{"url":"#build-the-graphql-schema","title":"Build the GraphQL schema"},{"url":"#executing-a-query","title":"Executing a Query"},{"url":"#configuring-systemtextjson","title":"Configuring System.Text.Json"},{"url":"#deserialization-of-queryrequest--queryvariables","title":"Deserialization of QueryRequest & QueryVariables"}]}]},"parent":{"relativePath":"getting-started.md"},"frontmatter":{"metaTitle":"Getting started - EntityGraphQL","metaDescription":"Get up and running with EntityGraphQL"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/authorization","title":"Authorization"}}},{"node":{"fields":{"slug":"/entity-framework","title":"Entity Framework"}}},{"node":{"fields":{"slug":"/getting-started","title":"Getting Started"}}},{"node":{"fields":{"slug":"/integration","title":"Tool Integration"}}},{"node":{"fields":{"slug":"/","title":"Entity GraphQL"}}},{"node":{"fields":{"slug":"/field-extensions","title":"Field Extensions"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/schema-creation","title":"Schema Creation"}}},{"node":{"fields":{"slug":"/validation","title":"Validation"}}},{"node":{"fields":{"slug":"/serialization-naming","title":"Serialization & Field Naming"}}},{"node":{"fields":{"slug":"/schema-creation/01-mutations","title":"Mutations"}}},{"node":{"fields":{"slug":"/schema-creation/04-directives","title":"Directives"}}},{"node":{"fields":{"slug":"/schema-creation/02-fields","title":"Field Arguments"}}},{"node":{"fields":{"slug":"/schema-creation/03-types","title":"Other Types"}}},{"node":{"fields":{"slug":"/field-extensions/02-filtering","title":"Filtering"}}},{"node":{"fields":{"slug":"/field-extensions/03-sorting","title":"Sorting"}}},{"node":{"fields":{"slug":"/field-extensions/04-custom-extensions","title":"Custom Extensions"}}},{"node":{"fields":{"slug":"/schema-creation/05-other-data-sources","title":"Other Data Sources"}}},{"node":{"fields":{"slug":"/serialization-naming/newtonsoft-json","title":"Using Newtonsoft.Json"}}},{"node":{"fields":{"slug":"/field-extensions/01-paging","title":"Paging"}}}]}},"pageContext":{"id":"492da216-1cf9-508a-a624-789ceec2a4eb"}},
    "staticQueryHashes": ["2619113677","3706406642","417421954"]}