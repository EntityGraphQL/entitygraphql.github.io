{"componentChunkName":"component---src-templates-docs-js","path":"/getting-started","result":{"data":{"site":{"siteMetadata":{"title":"Entity GraphQL Docs","docsLocation":"https://github.com/lukemurray/EntityGraphQL/tree/master/docs/content"}},"mdx":{"fields":{"id":"a924115e-7948-584f-b086-6382472c1997","title":"Getting Started","slug":"/getting-started"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Getting Started\",\n  \"metaTitle\": \"Getting started - EntityGraphQL\",\n  \"metaDescription\": \"Get up and running with EntityGraphQL\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Installation\"), mdx(\"p\", null, \"Install via \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.nuget.org/packages/EntityGraphQL\"\n  }, \"Nuget\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"It recommended to use \", mdx(\"a\", {\n    parentName: \"em\",\n    \"href\": \"https://www.nuget.org/packages/Microsoft.AspNetCore.Mvc.NewtonsoftJson\"\n  }, \"Newtonsoft.Json\"), \" when using using .NET Core 3.1+ due to problems with the default serialization of dictionaries in .NET Core 3.1.\")), mdx(\"h1\", null, \"Create a data model\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: There is no dependency on Entity Framework. Queries are compiled to \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"IQueryable\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"IEnumberable\"), \" LINQ expressions. EF is not a requirement - any ORM working with \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"LinqProvider\"), \" or an in-memory object will work - this example uses EF.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"public class DemoContext : DbContext\\n{\\n    public DbSet<Movie> Movies { get; set; }\\n    public DbSet<Person> People { get; set; }\\n    public DbSet<Actor> Actors { get; set; }\\n}\\n\\npublic class Movie\\n{\\n    public uint Id { get; set; }\\n    public string Name { get; set; }\\n    public Genre Genre { get; set; }\\n    public DateTime Released { get; set; }\\n    public List<Actor> Actors { get; set; }\\n    public List<Writer> Writers { get; set; }\\n    public Person Director { get; set; }\\n    public uint? DirectorId { get; set; }\\n    public double Rating { get; internal set; }\\n}\\n\\npublic class Actor\\n{\\n    public uint PersonId { get; set; }\\n    public Person Person { get; set; }\\n    public uint MovieId { get; set; }\\n    public Movie Movie { get; set; }\\n}\\npublic class Writer\\n{\\n    public uint PersonId { get; set; }\\n    public Person Person { get; set; }\\n    public uint MovieId { get; set; }\\n    public Movie Movie { get; set; }\\n}\\n\\npublic enum Genre\\n{\\n    Action,\\n    Drama,\\n    Comedy,\\n    Horror,\\n    Scifi,\\n}\\n\\npublic class Person\\n{\\n    public uint Id { get; set; }\\n    public string FirstName { get; set; }\\n    public string LastName { get; set; }\\n    public DateTime Dob { get; set; }\\n    public List<Actor> ActorIn { get; set; }\\n    public List<Writer> WriterOf { get; set; }\\n    public List<Movie> DirectorOf { get; set; }\\n    public DateTime? Died { get; set; }\\n    public bool IsDeleted { get; set; }\\n}\\n\")), mdx(\"h1\", null, \"Build the GraphQL schema\"), mdx(\"p\", null, \"We can use the helper method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SchemaBuilder.FromObject<T>>()\"), \" to build the schema from the .NET object model we defined above.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"var schema = SchemaBuilder.FromObject<DemoContext>();\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"See the Schema Creation section to learn more about \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"SchemaBuilder.FromObject<T>>()\"))), mdx(\"p\", null, \"Below we'll use this to expose an API with ASP.NET. See the next section on manually creating the schema and then Schema Customization for further customizations supported on the schema.\"), mdx(\"h1\", null, \"Create the API\"), mdx(\"p\", null, \"Using what ever .NET API library you wish you can receive a query, execute it and return the data. Here is an example with ASP.NET Core.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"public class Startup {\\n  public void ConfigureServices(IServiceCollection services)\\n  {\\n      services.AddControllers().AddNewtonsoftJson();\\n      services.AddDbContext<DemoContext>(opt => opt.UseInMemoryDatabase()); // Again this example using EF but you do not have to\\n      // add schema provider so we don't need to create it every time\\n      // Also for this demo we expose all fields on DemoContext\\n      services.AddSingleton(SchemaBuilder.FromObject<DemoContext>());\\n  }\\n}\\n\\n[Route(\\\"api/[controller]\\\")]\\npublic class QueryController : Controller\\n{\\n    private readonly DemoContext _dbContext;\\n    private readonly SchemaProvider<DemoContext> _schemaProvider;\\n\\n    public QueryController(DemoContext dbContext, SchemaProvider<DemoContext> schemaProvider)\\n    {\\n        this._dbContext = dbContext;\\n        this._schemaProvider = schemaProvider;\\n    }\\n\\n    [HttpPost]\\n    public object Post([FromBody]QueryRequest query)\\n    {\\n        try\\n        {\\n            var results = _schemaProvider.ExecuteQuery(query, _dbContext, HttpContext.RequestServices, null);\\n            // gql compile errors show up in results.Errors\\n            return results;\\n        }\\n        catch (Exception)\\n        {\\n            return HttpStatusCode.InternalServerError;\\n        }\\n    }\\n}\\n\")), mdx(\"p\", null, \"This sets up a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HTTP\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"POST\"), \" end point at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/api/query\"), \" where the body of the post is expected to be a GraphQL query.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"You can authorize the route how ever you wish using ASP.NET. See the Authorization section for more details.\")), mdx(\"p\", null, \"You can also expose any endpoint over any protocol you'd like. We'll use HTTP/S for these examples.\"), mdx(\"h1\", null, \"Query your API\"), mdx(\"p\", null, \"You can now make a request to your API via any HTTP tool/library.\"), mdx(\"p\", null, \"For example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"  POST localhost:5000/api/query\\n  {\\n    \\\"query\\\": \\\"{\\n      movies { id name }\\n    }\\\",\\n    \\\"variables\\\": null\\n  }\\n\")), mdx(\"p\", null, \"Will return the following result (depending on the data in you DB).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"{\\n  \\\"data\\\": {\\n    \\\"movies\\\": [\\n      {\\n        \\\"id\\\": 11,\\n        \\\"name\\\": \\\"Inception\\\"\\n      },\\n      {\\n        \\\"id\\\": 12,\\n        \\\"name\\\": \\\"Star Wars: Episode IV - A New Hope\\\"\\n      }\\n    ]\\n  }\\n}\\n\")), mdx(\"p\", null, \"Maybe you only want a specific property \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"(request body only from now on)\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"  {\\n    movie(id: 11) {\\n      id name\\n    }\\n  }\\n\")), mdx(\"p\", null, \"Will return the following result.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"{\\n  \\\"data\\\": {\\n    \\\"movie\\\": {\\n      \\\"id\\\": 11,\\n      \\\"name\\\": \\\"Inception\\\"\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"If you need other fields or relations, just ask\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"  {\\n    movies {\\n      id\\n      name\\n      director {\\n        name\\n      }\\n      writers {\\n        name\\n      }\\n    }\\n  }\\n\")), mdx(\"p\", null, \"Will return the following result.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"{\\n  \\\"data\\\": {\\n    \\\"movies\\\": [\\n      {\\n        \\\"id\\\": 11,\\n        \\\"name\\\": \\\"Inception\\\",\\n        \\\"director\\\": {\\n          \\\"name\\\": \\\"Christopher Nolan\\\"\\n        },\\n        \\\"writers\\\": [{\\n          \\\"name\\\": \\\"Christopher Nolan\\\"\\n        }]\\n      },\\n      {\\n        \\\"id\\\": 12,\\n        \\\"name\\\": \\\"Star Wars: Episode IV - A New Hope\\\",\\n        \\\"director\\\": {\\n          \\\"name\\\": \\\"George Lucas\\\"\\n        },\\n        \\\"writers\\\": [{\\n          \\\"name\\\": \\\"George Lucas\\\"\\n        }]\\n      }\\n    ]\\n  }\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#installation","title":"Installation"},{"url":"#create-a-data-model","title":"Create a data model"},{"url":"#build-the-graphql-schema","title":"Build the GraphQL schema"},{"url":"#create-the-api","title":"Create the API"},{"url":"#query-your-api","title":"Query your API"}]},"parent":{"relativePath":"getting-started.md"},"frontmatter":{"metaTitle":"Getting started - EntityGraphQL","metaDescription":"Get up and running with EntityGraphQL"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/authorization","title":"Authorization"}}},{"node":{"fields":{"slug":"/","title":"Entity GraphQL"}}},{"node":{"fields":{"slug":"/entity-framework","title":"Entity Framework"}}},{"node":{"fields":{"slug":"/getting-started","title":"Getting Started"}}},{"node":{"fields":{"slug":"/integration","title":"Integration"}}},{"node":{"fields":{"slug":"/schema-creation/01-mutations","title":"Mutations"}}},{"node":{"fields":{"slug":"/schema-creation","title":"Schema Creation"}}},{"node":{"fields":{"slug":"/schema-creation/02-fields","title":"Field Arguments"}}},{"node":{"fields":{"slug":"/schema-creation/04-directives","title":"Directives"}}},{"node":{"fields":{"slug":"/schema-creation/05-other-data-sources","title":"Other Data Sources"}}},{"node":{"fields":{"slug":"/schema-creation/03-types","title":"Other Types"}}},{"node":{"fields":{"slug":"/field-extensions","title":"Field Extensions"}}},{"node":{"fields":{"slug":"/field-extensions/02-filtering","title":"Filtering"}}},{"node":{"fields":{"slug":"/field-extensions/01-paging","title":"Paging"}}},{"node":{"fields":{"slug":"/field-extensions/03-sorting","title":"Sorting"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/schema-creation/06-naming","title":"Note on Naming"}}},{"node":{"fields":{"slug":"/field-extensions/04-custom-extensions","title":"Custom Extensions"}}}]}},"pageContext":{"id":"a924115e-7948-584f-b086-6382472c1997"}},"staticQueryHashes":["2619113677","3706406642","417421954"]}