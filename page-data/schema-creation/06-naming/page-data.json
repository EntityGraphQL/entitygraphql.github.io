{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/schema-creation/06-naming",
    "result": {"data":{"site":{"siteMetadata":{"title":"Entity GraphQL Docs","docsLocation":"https://github.com/lukemurray/EntityGraphQL/tree/master/docs/content"}},"mdx":{"fields":{"id":"fdda9e3a-a46b-5bf5-bf89-be1a55b6232b","title":"Field Naming","slug":"/schema-creation/06-naming"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Field Naming\",\n  \"metaTitle\": \"Note on Naming - EntityGraphQL\",\n  \"metaDescription\": \"Note on Naming\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"GraphQL is case-sensitive\"), \". Currently EntityGraphQL will automatically turn field and argument names from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UpperCase\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"camelCase\"), \" when you use the helper methods to create a schema with the default options. This means your C# code matches what C# code typically looks like and your GraphQL matches the GraphQL norm too.\"), mdx(\"p\", null, \"Examples:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A mutation method in C# named \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AddMovie\"), \" will be \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"addMovie\"), \" in the schema\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A root field entity named \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Movie\"), \" will be named \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"movie\"), \" in the schema\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A mutation arguments class (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ActorArgs\"), \") with fields \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"FirstName\"), \" & \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Id\"), \" will be arguments in the schema as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"firstName\"), \" & \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"id\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If you're using the schema builder manually, the names you give will be the names used. E.g. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"schemaProvider.AddField(\\\"someField\\\", ...)\"), \" is different to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"schemaProvider.AddField(\\\"SomeField\\\", ...)\"))), mdx(\"h1\", null, \"Override default naming\"), mdx(\"p\", null, \"To override the default behaviour you can pass in your own \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fieldNamer\"), \" function when creating the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SchemaProvider\"), \" or configuring it.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"services.AddGraphQLSchema<DemoContext>(builder => {\\n    builder.FieldNamer = name => name; // use the dotnet name as is\\n});\\n\")), mdx(\"p\", null, \"Then make sure you follow your naming policy when adding fields to the schema.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"services.AddGraphQLSchema<DemoContext>(builder => {\\n    builder.FieldNamer = name => name; // use the dotnet name as is\\n    builder.ConfigureSchema = schema => {\\n        schema.AddField(\\\"SomeField\\\", ...)\\n    };\\n});\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note that this impacts the names used for fields, arguments and types in the GraphQL schema and how these are matched to a query. This can impact serialization, but is not serialization.\")), mdx(\"p\", null, \"An example - our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DemoContext\"), \" with the default \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fieldNamer\"), \" will create this GraphQL schema (trimmed down for the example). Note the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"camelCase\"), \" naming.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"schema {\\n    query: Query\\n}\\n\\nType Query {\\n    people: [Person]\\n    person(id: ID!): Person\\n}\\n\\nType Person {\\n    id: ID!\\n    firstName: String!\\n    ...\\n}\\n\")), mdx(\"p\", null, \"This means queries need to match the casing as GraphQL is case-sensitive.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"{\\n  # will work\\n  people {\\n    id\\n    firstName\\n  }\\n\\n  # will fail\\n  People {\\n    id\\n    firstName\\n  }\\n}\\n\")), mdx(\"p\", null, \"The above query will generate typed objects \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"before serialization\"), \" with the match names from the schema. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note the types are generated internally as part of compiling, users do not need to use/know them but it demostrates things\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"public class TempPersonResult\\n{\\n    public Guid id;\\n    public string firstName;\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"QueryResult\"), \" object is a dictionary of root level queries \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{ fieldName: object }\"), \" and in the above case it would be\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"IEnumerable<TempPersonResult> people = ... // implementation more complex and not worth showing here - see Entity Framework section for more info\\nQueryResult result = ctx => {\\n    {\\\"people\\\", people}\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#override-default-naming","title":"Override default naming"}]},"parent":{"relativePath":"schema-creation/06-naming.md"},"frontmatter":{"metaTitle":"Note on Naming - EntityGraphQL","metaDescription":"Note on Naming"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/authorization","title":"Authorization"}}},{"node":{"fields":{"slug":"/entity-framework","title":"Entity Framework"}}},{"node":{"fields":{"slug":"/field-extensions","title":"Field Extensions"}}},{"node":{"fields":{"slug":"/","title":"Entity GraphQL"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/schema-creation/04-directives","title":"Directives"}}},{"node":{"fields":{"slug":"/schema-creation/03-types","title":"Other Types"}}},{"node":{"fields":{"slug":"/field-extensions/01-paging","title":"Paging"}}},{"node":{"fields":{"slug":"/schema-creation/02-fields","title":"Field Arguments"}}},{"node":{"fields":{"slug":"/field-extensions/02-filtering","title":"Filtering"}}},{"node":{"fields":{"slug":"/field-extensions/03-sorting","title":"Sorting"}}},{"node":{"fields":{"slug":"/field-extensions/04-custom-extensions","title":"Custom Extensions"}}},{"node":{"fields":{"slug":"/integration","title":"Tool Integration"}}},{"node":{"fields":{"slug":"/schema-creation","title":"Schema Creation"}}},{"node":{"fields":{"slug":"/getting-started","title":"Getting Started"}}},{"node":{"fields":{"slug":"/schema-creation/01-mutations","title":"Mutations"}}},{"node":{"fields":{"slug":"/schema-creation/05-other-data-sources","title":"Other Data Sources"}}},{"node":{"fields":{"slug":"/schema-creation/06-naming","title":"Field Naming"}}}]}},"pageContext":{"id":"fdda9e3a-a46b-5bf5-bf89-be1a55b6232b"}},
    "staticQueryHashes": ["2619113677","3706406642","417421954"]}