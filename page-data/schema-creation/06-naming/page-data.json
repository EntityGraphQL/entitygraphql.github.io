{"componentChunkName":"component---src-templates-docs-js","path":"/schema-creation/06-naming","result":{"data":{"site":{"siteMetadata":{"title":"Entity GraphQL Docs","docsLocation":"https://github.com/lukemurray/EntityGraphQL/tree/master/docs/content"}},"mdx":{"fields":{"id":"ab0a46be-4791-5766-ba15-0b7727c8c542","title":"Note on Naming","slug":"/schema-creation/06-naming"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Note on Naming\",\n  \"metaTitle\": \"Note on Naming - EntityGraphQL\",\n  \"metaDescription\": \"Note on Naming\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"GraphQL is case sensitive. Currently EntityGraphQL will automatically turn field and argument names from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UpperCase\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"camelCase\"), \" when you use the helper methods to create a schema with the default namer factory. This means your C# code matches what C# code typically looks like and your GraphQL matches the GraphQL norm too.\"), mdx(\"p\", null, \"Examples:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A mutation method in C# named \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AddMovie\"), \" will be \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"addMovie\"), \" in the schema\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A root field entity named \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Movie\"), \" will be named \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"movie\"), \" in the schema\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A mutation arguments class (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ActorArgs\"), \") with fields \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"FirstName\"), \" & \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Id\"), \" will be arguments in the schema as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"firstName\"), \" & \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"id\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If you're using the schema builder manually, the names you give will be the names used. E.g. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"schemaProvider.AddField(\\\"someEntity\\\", ...)\"), \" is different to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"schemaProvider.AddField(\\\"SomeEntity\\\", ...)\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{},"parent":{"relativePath":"schema-creation/06-naming.md"},"frontmatter":{"metaTitle":"Note on Naming - EntityGraphQL","metaDescription":"Note on Naming"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/authorization","title":"Authorization"}}},{"node":{"fields":{"slug":"/","title":"Entity GraphQL"}}},{"node":{"fields":{"slug":"/entity-framework","title":"Entity Framework"}}},{"node":{"fields":{"slug":"/getting-started","title":"Getting Started"}}},{"node":{"fields":{"slug":"/integration","title":"Integration"}}},{"node":{"fields":{"slug":"/schema-creation/01-mutations","title":"Mutations"}}},{"node":{"fields":{"slug":"/schema-creation","title":"Schema Creation"}}},{"node":{"fields":{"slug":"/schema-creation/02-fields","title":"Field Arguments"}}},{"node":{"fields":{"slug":"/schema-creation/04-directives","title":"Directives"}}},{"node":{"fields":{"slug":"/schema-creation/05-other-data-sources","title":"Other Data Sources"}}},{"node":{"fields":{"slug":"/schema-creation/03-types","title":"Other Types"}}},{"node":{"fields":{"slug":"/field-extensions","title":"Field Extensions"}}},{"node":{"fields":{"slug":"/field-extensions/02-filtering","title":"Filtering"}}},{"node":{"fields":{"slug":"/field-extensions/01-paging","title":"Paging"}}},{"node":{"fields":{"slug":"/field-extensions/03-sorting","title":"Sorting"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/schema-creation/06-naming","title":"Note on Naming"}}},{"node":{"fields":{"slug":"/field-extensions/04-custom-extensions","title":"Custom Extensions"}}}]}},"pageContext":{"id":"ab0a46be-4791-5766-ba15-0b7727c8c542"}},"staticQueryHashes":["2619113677","3706406642","417421954"]}