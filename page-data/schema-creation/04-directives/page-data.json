{"componentChunkName":"component---src-templates-docs-js","path":"/schema-creation/04-directives","result":{"data":{"site":{"siteMetadata":{"title":"Entity GraphQL Docs","docsLocation":"https://github.com/lukemurray/EntityGraphQL/tree/master/docs/content"}},"mdx":{"fields":{"id":"e13b5cd3-9fc1-5f08-93c6-ca9c6e0b3b24","title":"Directives","slug":"/schema-creation/04-directives"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Directives\",\n  \"metaTitle\": \"Working with directives - EntityGraphQL\",\n  \"metaDescription\": \"Working with directives in your GraphQL schema\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://graphql.org/learn/queries/#directives\"\n  }, \"Directives\"), \" provide a way to dynamically change the structure and shape of our queries using variables. An example from the GraphQL website:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"query Hero($episode: Episode, $withFriends: Boolean!) {\\n  hero(episode: $episode) {\\n    name\\n    friends @include(if: $withFriends) {\\n      name\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"Now if you set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"withFriends\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" in the variables passed with the query POST you'll get the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"friends\"), \" result. If you set it to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \" you will not. Thus dynamically changing the shape of your query.\"), mdx(\"h1\", null, \"Built-In Directives\"), mdx(\"p\", null, \"The GraphQL spec defines 2 directives that are supported out of the box in EntityGraphQL.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@include(if: Boolean)\"), \" - Only include this field in the result if the argument is true.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@skip(if: Boolean)\"), \" - Skip this field if the argument is true.\")), mdx(\"h1\", null, \"Custom Directives\"), mdx(\"p\", null, \"See the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/lukemurray/EntityGraphQL/blob/master/src/EntityGraphQL/Directives/IncludeDirectiveProcessor.cs\"\n  }, \"IncludeDirective\"), \" implementation to see how you could implement a custom directive. You can add your directive to the schema with the following\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"// Example only, you don't need to actually add Include or Skip directives\\nschema.AddDirective(new IncludeDirective());\\n\")), mdx(\"p\", null, \"These directives work on the internal representation of a field \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GraphQLQueryNode\"), \". This is working against the query graph not the data result.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"There is more functionality planned for custom directives which can work on both the pre-execution query graph or the post-execution data.\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#built-in-directives","title":"Built-In Directives"},{"url":"#custom-directives","title":"Custom Directives"}]},"parent":{"relativePath":"schema-creation/04-directives.md"},"frontmatter":{"metaTitle":"Working with directives - EntityGraphQL","metaDescription":"Working with directives in your GraphQL schema"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/authorization","title":"Authorization"}}},{"node":{"fields":{"slug":"/entity-framework","title":"Entity Framework"}}},{"node":{"fields":{"slug":"/integration","title":"Tool Integration"}}},{"node":{"fields":{"slug":"/getting-started","title":"Getting Started"}}},{"node":{"fields":{"slug":"/field-extensions","title":"Field Extensions"}}},{"node":{"fields":{"slug":"/","title":"Entity GraphQL"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/schema-creation","title":"Schema Creation"}}},{"node":{"fields":{"slug":"/serialization-naming","title":"Serialization & Field Naming"}}},{"node":{"fields":{"slug":"/validation","title":"Validation"}}},{"node":{"fields":{"slug":"/serialization-naming/newtonsoft-json","title":"Using Newtonsoft.Json"}}},{"node":{"fields":{"slug":"/schema-creation/01-mutations","title":"Mutations"}}},{"node":{"fields":{"slug":"/schema-creation/02-fields","title":"Field Arguments"}}},{"node":{"fields":{"slug":"/schema-creation/04-directives","title":"Directives"}}},{"node":{"fields":{"slug":"/schema-creation/05-other-data-sources","title":"Other Data Sources"}}},{"node":{"fields":{"slug":"/schema-creation/03-types","title":"Other Types"}}},{"node":{"fields":{"slug":"/field-extensions/01-paging","title":"Paging"}}},{"node":{"fields":{"slug":"/field-extensions/02-filtering","title":"Filtering"}}},{"node":{"fields":{"slug":"/field-extensions/04-custom-extensions","title":"Custom Extensions"}}},{"node":{"fields":{"slug":"/field-extensions/03-sorting","title":"Sorting"}}}]}},"pageContext":{"id":"e13b5cd3-9fc1-5f08-93c6-ca9c6e0b3b24"}},"staticQueryHashes":["2619113677","3706406642","417421954"]}